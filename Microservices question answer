Spring Boot microservices

1. What are microservices, and why are they used?
   Microservices are an architectural style that structures an application as a collection of small, autonomous services. Each service is designed to perform a 
   specific business function and communicates with other services through lightweight protocols like HTTP/REST, gRPC, or messaging systems.
   Advantages: 
      Scalability: Individual services can scale independently. Decentralized data management. 
      Flexibility in technology stack and faster development cycles. Fault isolation
      Reliability is improved in application .

2. How do you implement inter-service communication in microservices? 
   Synchronous: REST (HTTP), gRPC. Asynchronous: Messaging systems like Kafka, RabbitMQ, or JMS. For synchronous communication, ensure timeout mechanisms 
                and circuit breakers (e.g., Resilience4j) are implemented. 
   Asynchronous: communication, leverage message brokers with reliable delivery mechanisms and eventual consistency patterns.

3. Explain service discovery in microservices. 
   Service discovery enables microservices to find each other dynamically at runtime. Tools: Eureka (Netflix OSS), Consul, Zookeeper, or Kubernetes DNS. 
   Spring Cloud Netflix Eureka: In a Spring Boot app, a service registers with a discovery server using @EnableEurekaClient. The discovery server helps resolve 
   service instances dynamically. 

4. How do you handle security in microservices? 
   Authentication/Authorization: Implement OAuth2 with tools like Spring Security and Keycloak. API Gateway Security: Use JWT tokens and validate them at the gateway level.
   Service-to-Service Communication: Secure inter-service calls using mTLS (Mutual TLS) or token-based mechanisms. 
   Best Practices: 
      Secure sensitive data using environment variables, encrypt configurations using Spring Cloud Config, and adopt proper logging mechanisms. 

5. What is the role of API Gateway in microservices? 
   API Gateway acts as a single entry point for all clients.
   Responsibilities: Request routing to appropriate services. Aggregating responses from multiple services. Handling authentication, rate limiting, logging, and
   caching. Tools: Spring Cloud Gateway, Zuul, NGINX.

6. What are Circuit Breakers, and how are they implemented? 
   A Circuit Breaker prevents an application from making repeated requests to a failing service, thereby improving system resilience. Implementation in Spring Boot: 
   Use libraries like Resilience4j or Hystrix. 
   Example: @CircuitBreaker(name = "exampleService", fallbackMethod ="fallbackResponse") 
   public String callService() { 
      // Remote service call
   } 

   public String fallbackResponse(Throwable t) { 
   return "Fallback response due to failure"; 
   }


7. How do you implement distributed tracing in microservices? 
   Distributed tracing helps track requests as they move across services. 
   Tools: Zipkin, Jaeger, Spring Cloud Sleuth. In Spring Boot, you can integrate Spring Cloud Sleuth with Zipkin for tracking requests: 
   <dependency>
      <groupId>org.springframework.cloud</groupId> 
      <artifactId>spring-cloud-starter-sleuth</artifactId>
   </dependency>

   <dependency> 
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-zipkin</artifactId>
   </dependency> 

8. How do you ensure data consistency across distributed services?
   Eventual Consistency: Use event-driven communication with tools like Kafka or RabbitMQ. SAGA Pattern: Break a distributed transaction into a series of local transactions
   coordinated by a central orchestrator or choreography. 
   Best Practices: Use idempotent operations. Leverage compensating transactions for rollback.

9. How do you configure centralized logging in microservices?
   Centralized logging collects logs from all microservices into a single place for monitoring and debugging. Tools: ELK Stack (Elasticsearch, Logstash, Kibana), Graylog.
   Spring Boot integrates with Logstash using Logback appenders: 
   
   <appender name="LOGSTASH" class="net.logstash.logback.appender.
   LogstashTcpSocketAppender"> <destination>localhost:5000</destination> </appender> 


10. What are the advantages and challenges of using Spring Boot for microservices?
      Advantages: Simplified configuration with Spring Boot Starter Projects. Seamless integration with Spring Cloud tools. Built-in support for embedded servers like 
      Tomcat and Jetty. Challenges: Memory overhead due to multiple services running independently. Managing dependencies and configurations across services. 

11. How do you handle database per microservice? 
      Each microservice owns its database (polyglot persistence) to ensure loose coupling. Patterns: Database Sharding: Divide a single database into logical pieces.
      CQRS (Command Query Responsibility Segregation): Separate read and write models. Use shared databases only as a last resort with clear boundaries to avoid 
      tight coupling.

12. What is Spring Cloud Config, and how does it work? 
      Spring Cloud Config provides server-side and client-side support for externalized configuration in microservices. Configurations are stored in Git or another version
      control system. 
      Example: spring.cloud.config.uri=http://localhost:8888 The Config Server retrieves and serves configuration properties to the microservices dynamically.

13. How do you deploy Spring Boot microservices in production?
    Use containerization tools like Docker. Orchestrate services using Kubernetes or Docker Swarm. Employ CI/CD pipelines for automated deployments. Use health checks
    (/actuator/health) for service monitoring and readiness probes in Kubernetes.

14. How do you optimize the performance of microservices?
      Use caching mechanisms like Redis or Hazelcast. Optimize database queries and index usage. Implement asynchronous processing where applicable. Use load testing 
      tools like JMeter to benchmark performance. Scale horizontally by adding instances. 

15. Explain how youâ€™ve dealt with microservices challenges in a previous project. 
      Tailor your response with examples: Challenge: Debugging issues in a distributed system.
      Solution: Implemented distributed tracing using Spring Sleuth and Zipkin. 
      Challenge: Database consistency in a payment service.
         Solution: Adopted the SAGA pattern to maintain eventual consistency and 
                  implemented compensating transactions for rollback. 

