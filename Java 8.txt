Java 8 Features(LMNO DBDS)

1. Lambda expression − Adds functional processing capability to Java.

2. Method references − Referencing functions by their names instead of invoking them directly. Using functions as parameter.

3. Nashorn, JavaScript Engine − A Java-based engine to execute JavaScript code.

4. Optional − Emphasis on best practices to handle null values properly.

5. Stream API − New stream API to facilitate pipeline processing.

6. Default method − Interface to have default method implementation.

7. Date Time API − Improved date time API.

8. Base64 - Java 8 now has inbuilt encoder and decoder for Base64 encoding.



1. Lambda Expression

A lambda expression is characterized by the syntax           .

 parameter -> expression body

Following are the important characteristics of a lambda expression.

Optional type declaration − No need to declare the type of a parameter. The compiler can inference the same from the value of the parameter.

Optional parenthesis around parameter − No need to declare a single parameter in parenthesis. For multiple parameters, parentheses are required.

Optional curly braces − No need to use curly braces in expression body if the body contains a single statement.

Optional return keyword − The compiler automatically returns the value if the body has a single expression to return the value.

Following are the important points to be considered.

1. What is Functional Programming
	a programming style that uses pure functions to solve problems. It emphasizes writing concise, readable code that's easier to 	maintain and scale
	Lambda expressions are used to define implementation of a functional interface. it eliminates the need of anonymous class and gives a functional programming 		capability to Java.

	Types of Functional Interfaces
	Java provides several built-in functional interfaces in the java.util.function package.
	1. Predicate<T>: The Predicate interface is often used for filtering and matching conditions.
		Description: Represents a function that takes one argument and returns a boolean.
		Method: boolean test(T t)
		
		Example:
			Predicate<String> isEmpty = str -> str.isEmpty();
			System.out.println(isEmpty.test("")); // true

	2. Function<T, R>
		Description: Represents a function that takes one argument and produces a result.
		Method: R apply(T t)
		
		Example:
			Function<String, Integer> stringLength = str -> str.length();
			System.out.println(stringLength.apply("Hello")); // 5

	3. Consumer<T>
		Description: Represents an function that takes a one argument and returns no result. It is used for operations that consume data.
		Method: void accept(T t)
		
		Example:
			Consumer<String> print = str -> System.out.println(str);
			print.accept("Hello, World!"); // Prints: Hello, World!

	4. Supplier<T>
		Description: Represents a supplier of results. It does not take any arguments and returns a result.
		Method: T get()

		Example:
			Supplier<String> supplier = () -> "Hello, Supplier!";
			System.out.println(supplier.get()); // Hello, Supplier!

	5. UnaryOperator<T>
		Description: Represents a function that takes a single argument of type T and returns a result of the same type.
		Method: T apply(T t)

		Example:
			UnaryOperator<Integer> square = x -> x * x;
			System.out.println(square.apply(5)); // 25

	6. BinaryOperator<T>
		Description: Represents a function that takes two arguments of the same type and returns a result of the same type.
		Method: T apply(T t1, T t2)

		Example:
			BinaryOperator<Integer> add = (a, b) -> a + b;
			System.out.println(add.apply(5, 10)); // 15


2. Method references 

Method references help to point to methods by their names. Method reference is used to refer method of functional interface.
A method reference is described using "::" symbol.
A method reference can be used to point the following types of methods −
Static methods
Instance methods
Constructors using new operator (TreeSet::new)

Example 

import java.util.List;
import java.util.ArrayList;

public class Java8Tester {

   public static void main(String args[]) {
      List names = new ArrayList();
		
      names.add("Mahesh");
      names.add("Suresh");
      names.add("Ramesh");
      names.add("Naresh");
      names.add("Kalpesh");
		
      names.forEach(System.out::println);
   }
}



3. Nashorn, JavaScript Engine − A Java-based engine to execute JavaScript code.

4. Optional - Optional class is a container object that may or may not contain a value. It was introduced as part of the import java.util.Optional; package to help developers avoid NullPointerExceptions and to provide a more
	expressive way to handle optional values.

	Creating an Optional: -You can create an Optional instance in several ways:
	1. Empty Optional:  			Optional<String> emptyOptional = Optional.empty();			// it creates an empty Optional instance, it does not contain a value
	2. Optional with a Non-null Value:	Optional<String> nonNullOptional = Optional.of("Hello, World!");	// it creates an Optional with a non-null value. If the value is null, it throws a NullPointerException
	3. Optional that Allows Null Values:	Optional<String> nullableOptional = Optional.ofNullable(null); 		// it creates an Optional that can hold a value that may be null. If the value is null, it creates an empty Optional


	Common Methods of Optional  (Get IfOrElse MapIsFlat)
	1. isPresent(): Checks if a value is present.
		Optional<String> optional = Optional.of("Hello");
		if (optional.isPresent()) {
    			System.out.println(optional.get()); // Prints: Hello
		}
	
	2. ifPresent(Consumer<? super T> action): Executes the given action if a value is present.
		optional.ifPresent(value -> System.out.println(value)); // Prints: Hello

	3. get(): Returns the value if present; otherwise, it throws NoSuchElementException.
		String value = optional.get(); // Returns "Hello"

	4. orElse(T other): Returns the value if present; otherwise, returns the provided default value.
		String value = emptyOptional.orElse("Default Value"); // Returns "Default Value"

	5. orElseGet(Supplier<? extends T> other): Returns the value if present; otherwise, invokes the provided supplier and returns the result.
		String value = emptyOptional.orElseGet(() -> "Generated Value"); // Returns "Generated Value"

	6. orElseThrow(Supplier<? extends X> exceptionSupplier): Returns the value if present; otherwise, throws an exception created by the provided supplier.
		String value = emptyOptional.orElseThrow(() -> new IllegalArgumentException("Value is absent"));

	7. map(Function<? super T, ? extends U> mapper): If a value is present, applies the provided mapping function to it and returns an Optional describing the result.
		Optional<Integer> lengthOptional = optional.map(String::length); // Returns Optional[5]

	8. flatMap(Function<? super T, Optional<U>> mapper): Similar to map, but the mapping function must return an Optional
		Optional<String> optionalValue = Optional.of("Hello");
		Optional<Integer> lengthOptional = optionalValue.flatMap(value -> Optional.of(value.length())); // Returns Optional[5]


5. STREAM  API
Stream represents a sequence of objects from a source, which supports aggregate operations.

Using stream, you can process data in a declarative way similar to SQL statements. SELECT max(salary), employee_id, employee_name FROM Employee
The above SQL expression automatically returns the maximum salaried employee's details, without doing any computation on the developer's end. 
Using collections framework in Java, a developer has to use loops and make repeated checks. Another concern is efficiency; 
as multi-core processors are available at ease, a Java developer has to write parallel code processing that can be pretty error-prone.

A stream gets/computes elements on demand. It never stores the elements. Stream takes Collections, Arrays, or I/O resources as input source
Stream operations do the iterations internally over the source elements provided, in contrast to Collections where explicit iteration is required.

Example 
Collection interface has two methods to generate a Stream.

stream() − Returns a sequential stream considering collection as its source.

parallelStream() − Returns a parallel Stream considering collection as its source.

List<String> strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
List<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());


forEach
Stream has provided a new method ‘forEach’ to iterate each element of the stream. The following code segment shows how to print 10 random numbers using forEach.

Random random = new Random();
random.ints().limit(10).forEach(System.out::println);

map
The ‘map’ method is used to map each element to its corresponding result. The following code segment prints unique squares of numbers using map.

List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);

//get list of unique squares
List<Integer> squaresList = numbers.stream().map( i -> i*i).distinct().collect(Collectors.toList());

flatMap is a method in the Java Stream API that allows you to transform and flatten nested structures into a single stream.
It is useful for dealing with collections of collections or when you want to transform elements into multiple outputs.
The resulting stream from flatMap contains all the elements from the nested streams, flattened into a single stream

		List<List<Integer>> listOfLists = Arrays.asList(
                Arrays.asList(1, 2, 3),
                Arrays.asList(4, 5),
                Arrays.asList(6, 7, 8, 9)
        	);

        // Using flatMap to flatten the list of lists
        List<Integer> flattenedList = listOfLists.stream()
                .flatMap(List::stream) // Flattening the lists
                .collect(Collectors.toList()); // Collecting into a single list

        System.out.println(flattenedList); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]


filter
The ‘filter’ method is used to eliminate elements based on a criteria. The following code segment prints a count of empty strings using filter.

List<String>strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");

//get count of empty string
int count = strings.stream().filter(string -> string.isEmpty()).count();


limit
The ‘limit’ method is used to reduce the size of the stream. The following code segment shows how to print 10 random numbers using limit.

Random random = new Random();
random.ints().limit(10).forEach(System.out::println);


sorted
The ‘sorted’ method is used to sort the stream. The following code segment shows how to print 10 random numbers in a sorted order.

Random random = new Random();
random.ints().limit(10).sorted().forEach(System.out::println);


Parallel Processing
parallelStream is the alternative of stream for parallel processing. Take a look at the following code segment that prints a count of empty strings using parallelStream.

List<String> strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");

//get count of empty string
long count = strings.parallelStream().filter(string -> string.isEmpty()).count();
It is very easy to switch between sequential and parallel streams.


Collectors (CouPar JoiSum)
Collectors are used to combine the result of processing on the elements of a stream. Collectors can be used to return a list or a string.

Common Collectors: Some of the most commonly used collectors include:

joining(): Concatenates the elements of the stream into a single String.
groupingBy(): Groups the elements of the stream by a classifier function.
partitioningBy(): Partitions the elements of the stream into two groups based on a predicate. It returns a Map<Boolean, List<T>>, where the key is true or false
counting(): Counts the number of elements in the stream.
summarizingInt(), summarizingDouble(), summarizingLong(): Collects statistics, such as count, sum, min, average, and max.
toList(): Collects the elements of the stream into a List.
toSet(): Collects the elements of the stream into a Set.
toMap(): Collects the elements of the stream into a Map.

example
List<String> names = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");

 Map<Integer, List<String>> groupedByLength = names.stream()
            .collect(Collectors.groupingBy(String::length));

// Partitioning names based on their length (greater than 3)
        Map<Boolean, List<String>> partitionedByLength = names.stream()
            .collect(Collectors.partitioningBy(name -> name.length() > 3));

 // Collecting names into a Map with name as key and length as value
        Map<String, Integer> nameLengthMap = names.stream()
            .collect(Collectors.toMap(name -> name, String::length));

String mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(", "));

// Summarizing statistics
        IntSummaryStatistics stats = numbers.stream()
            .collect(Collectors.summarizingInt(Integer::intValue));


Stream INTERMEDIATE methods are   MaFiSoDi FlaSk PeeLi  (map, filter, sorted, distinct, Flatmap, Skip, Peek, Limited)
Intermediate operations are lazy, meaning they are not executed until a terminal operation is invoked.

The peek method in the Java Stream API is a useful tool for debugging and inspecting the elements flowing through a stream. It allows you to perform actions on each element without modifying the stream, making it easier to understand and trace the transformations applied to the data.

	example
	List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");

        // Using peek to debug the stream
        names.stream()
            .filter(name -> name.length() > 3) // Filter names longer than 3 characters
            .peek(name -> System.out.println("Filtered name: " + name)) // Peek to see filtered names
            .map(String::toUpperCase) // Convert names to uppercase
            .peek(name -> System.out.println("Uppercased name: " + name)) // Peek to see uppercased names
            .forEach(System.out::println); // Terminal operation to print the final result


Stream Terminal methods are

List of Terminal Operations in Streams (ColCouToA, ReSuMa, NoneAllAny, SummrayforEa)
	1. forEach(Consumer<? super T> action): Performs an action for each element of the stream. This is a terminal operation that consumes the elements of the stream.
		stream.forEach(System.out::println);
	2. forEachOrdered(Consumer<? super T> action): Similar to forEach, but guarantees that the action is performed in the encounter order of the stream.
		stream.forEachOrdered(System.out::println);
	3. toArray(): Returns an array containing the elements of the stream.
		Object[] array = stream.toArray();
	4. toArray(IntFunction<A[]> generator): Returns an array containing the elements of the stream, using the provided generator to create the array.
		String[] array = stream.toArray(String[]::new);
	5. reduce(T identity, BinaryOperator<T> accumulator): Performs a reduction on the elements of the stream using an associative accumulation function and 
		returns an Optional.
		int sum = stream.reduce(0, Integer::sum);
	6. reduce(BinaryOperator<T> accumulator): Performs a reduction on the elements of the stream using an associative accumulation function and returns an Optional.
		Optional<Integer> sum = stream.reduce(Integer::sum);
	7. collect(Collector<? super T, A, R> collector): Performs a mutable reduction operation on the elements of the stream using a Collector.
		List<String> list = stream.collect(Collectors.toList());
	8. count(): Returns the count of elements in the stream as a long.
		long count = stream.count();
	9. sum(): Returns the sum of the elements in the stream (for numeric streams).
		int sum = intStream.sum();
	10. min(Comparator<? super T> comparator): Returns the minimum element of the stream according to the provided comparator.
		Optional<String> min = stream.min(String::compareTo);
	11. max(Comparator<? super T> comparator): Returns the maximum element of the stream according to the provided comparator.
		Optional<String> max = stream.max(String::compareTo);
	12. anyMatch(Predicate<? super T> predicate): Returns true if any elements of the stream match the given predicate.
		boolean hasEven = stream.anyMatch(n -> n % 2 == 0);
	13. allMatch(Predicate<? super T> predicate): Returns true if all elements of the stream match the given predicate.
		boolean allEven = stream.allMatch(n -> n % 2 == 0);
	14. noneMatch(Predicate<? super T> predicate): Returns true if no elements of the stream match the given predicate.noneMatch(Predicate<? super T> predicate)
		boolean noEven = stream.noneMatch(n -> n % 2 == 0);
	15. findFirst(): Returns an Optional describing the first element of the stream, or an empty Optional if the stream is empty.
		Optional<String> first = stream.findFirst();
	16. findAny(): Returns an Optional describing some element of the stream, or an empty Optional if the stream is empty. This is particularly useful in
		parallel streams.
		Optional<String> any = stream.findAny();
	17. iterator(): Returns an Iterator for the elements of the stream.
		Iterator<String> iterator = stream.iterator();
	18. summaryStatistics()

		IntSummaryStatistics stats = numbers.stream().mapToInt((x) -> x).summaryStatistics();
		System.out.println("Count: " + stats.getCount());
		System.out.println("Lowest number in List : " + stats.getMin());
		System.out.println("Sum of all numbers : " + stats.getSum());
		System.out.println("Average of all numbers : " + stats.getAverage());




9. why do we use IntStream
        the Stream API is designed to work with objects, not primitive types directly. However, the Stream API provides special primitive-type streams to handle
        primitive values such as 
                1. IntStream: A stream of primitive ints.
                2. LongStream: A stream of primitive longs.
                3. DoubleStream

                example:   int[] intArray = {1, 2, 3, 4, 5};
                           // Using IntStream
                              IntStream intStream = Arrays.stream(intArray);
                           // Example operations on IntStream
                              int sum = intStream.sum();
        You can convert a regular Stream to a primitive-type stream using methods like mapToInt, mapToLong, or mapToDouble.
                example:  List<Integer> numbersList = Arrays.asList(1, 2, 3, 4, 5);
                          IntStream intStream = numbersList.stream().mapToInt(Integer::intValue);

        Conversely, you can convert a primitive-type stream to a regular Stream using methods like boxed().
                example:     // Convert IntStream to Stream<Integer>
                            IntStream intStream = Arrays.stream(intArray);
                            List<Integer> resultList = intStream.boxed().collect(Collectors.toList());


            example showcasing various methods available in Java 8 for working with IntStream
                    int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};


        // 2. sum
        int sum = IntStream.of(numbers).sum();

        // 3. average
        OptionalDouble average = IntStream.of(numbers).average();
        System.out.println("Average: " + average.orElse(0.0));

        // 4. min
        OptionalInt min = IntStream.of(numbers).min();
        System.out.println("Min: " + min.orElse(0));

        // 6. count
        long count = IntStream.of(numbers).count();
        System.out.println("Count: " + count);

        // 7. summaryStatistics
        IntSummaryStatistics stats = IntStream.of(numbers).summaryStatistics();
        System.out.println("Stats: " + stats);

10.   How do you create an IntStream in Java?
            using factory methods like
                IntStream.range(int startInclusive, int endExclusive) or 
                IntStream.rangeClosed(int startInclusive, int endInclusive) 
                IntStream.of(numbers[])
             or by converting other data structures like arrays or collections using
                Arrays.stream(int[] array) or 
                Collection.stream().mapToInt().


6. Default method

This capability is added for backward compatibility so that old interfaces can be used to leverage the lambda expression capability of Java 8.
For example, ‘List’ or ‘Collection’ interfaces do not have ‘forEach’ method declaration. Thus, adding such method will simply break the collection framework implementations


7. Date Time API
a new Date-Time API is introduced to cover the following drawbacks of old date-time API.

Not thread safe − java.util.Date is not thread safe, thus developers have to deal with concurrency issue while using date. 
The new date-time API is immutable and does not have setter methods.
Difficult time zone handling.
important classes introduced in java.time package.

Local − Simplified date-time API with no complexity of timezone handling.

Zoned − Specialized date-time API to deal with various timezones.


8. Base64 

we can use three types of Base64 encoding.

Simple − Output is mapped to a set of characters lying in A-Za-z0-9+/. The encoder does not add any line feed in output,
and the decoder rejects any character other than A-Za-z0-9+/.

URL − Output is mapped to set of characters lying in A-Za-z0-9+_. Output is URL and filename safe.

MIME − Output is mapped to MIME friendly format. Output is represented in lines of no more than 76 characters each, 
and uses a carriage return '\r' followed by a linefeed '\n' as the line separator. No line separator is present to the end of the encoded output.
