Commonly Used Design Patterns in Spring

1. Dependency Injection (DI) Pattern : Dependency Injection is a creational pattern where an object receives its dependencies from an external source rather than creating them itself. In Spring, this is achieved through XML configuration, annotations, or Java-based configuration.

Benefits of Dependency Injection Pattern in Spring:

Loose Coupling: Objects are less dependent on each other, making the system more modular.Easier Testing: Dependencies can be easily mocked or stubbed out.Enhanced Maintainability: Changes to a dependency do not require changes to the dependent class.

In the below example, "UserService" depends on "UserRepository", and Spring injects this dependency.


@Component
public class UserService {
private final UserRepository userRepository;

@Autowired
public UserService(UserRepository userRepository) {
this.userRepository = userRepository;
}
}




