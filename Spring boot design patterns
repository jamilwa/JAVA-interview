What are Design Patterns?
    A design pattern is a reusable solution for common problems in software development. It is a guideline or model for solving issues. 
    Design patterns can be adapted to different situations and contexts, providing flexibility in problem-solving.


Commonly Used Design Patterns in Spring

1. Dependency Injection (DI) Pattern : Dependency Injection is a creational pattern where an object receives its dependencies from an external source rather than 
    creating them itself. In Spring, this is achieved through XML configuration, annotations, or Java-based configuration.

Benefits of Dependency Injection Pattern in Spring:

Loose Coupling:     Objects are less dependent on each other, making the system more modular.
Easier Testing:     Dependencies can be easily mocked or stubbed out.
Enhanced Maintainability:     Changes to a dependency do not require changes to the dependent class.

In the below example, "UserService" depends on "UserRepository", and Spring injects this dependency.


@Component
public class UserService {
private final UserRepository userRepository;

@Autowired
public UserService(UserRepository userRepository) {
this.userRepository = userRepository;
}
}



----------------------Design Patterns in JaVA----------------------
Creational Design Patterns in Java      (J SinBuFacAbsFacPro)

1. Factory Method Design Pattern
        Objects can be produced without having to define the exact class of object to be created. This pattern is helpful when it's necessary to separate the 
        construction of an object from its implementation.  
2. Abstract Factory Method Design Pattern
        Abstract Factory patterns work around a super-factory which creates other factories. Abstract Factory pattern is almost similar to Factory Pattern and is
        considered as another layer of abstraction over factory pattern.
      

3. Singleton Method Design Pattern
      The Singleton Method Design Pattern ensures a class has only one instance and provides a global access point to it. 

Below are the principles of the Singleton Pattern:
    1. Single Instance: Singleton ensures that only one instance of the class exists throughout the application.
    2. Global Access: Provide a global point of access to that instance.
    3. Lazy or Eager Initialization: Support creating the instance either when needed (lazy) or when the class is loaded (eager).
    4. Thread Safety: Implement mechanisms to prevent multiple threads from creating separate instances simultaneously.
    5. Private Constructor: Restrict direct instantiation by making the constructor private, forcing the use of the access point

Use the Singleton method Design Pattern when:
    1. you need to ensure that only one instance of a class exists in your application.
    2. you want to provide a straightforward way for clients to access that instance from a specific location in your code.
    3. you might want to extend the class later. It allows for subclassing, so clients can work with the extended version without changing the original Singleton.
    4. in situations like logging, managing connections to hardware or databases, caching data, or handling thread pools.


import java.io.*;
class Singleton {
    private static Singleton instance;
    private Singleton()
    {
        System.out.println("Singleton is Instantiated.");
    }
    public static Singleton getInstance()
    {
        if (instance == null)
            instance = new Singleton();
        return instance;
    }
    public static void doSomething()
    {
        System.out.println("Somethong is Done.");
    }
}

class GFG {
    public static void main(String[] args)
    {
        Singleton.getInstance().doSomething();
    }
}


4. Prototype Method Design Pattern
      Prototype allows us to hide the complexity of making new instances from the client.
      The concept is to copy an existing object rather than creating a new instance from scratch, something that may include costly operations.

5. Builder Method Design Pattern
      To “Separate the construction of a complex object from its representation so that the same construction process can create different representations.”
      Builder pattern is used. It helps in constructing a complex object step by step and the final step will return the object.



    

