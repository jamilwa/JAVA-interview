What are Design Patterns?
    A design pattern is a reusable solution for common problems in software design used in engineering. It is not a full design ready for coding but rather a 
    guideline or model for solving issues. Design patterns can be adapted to different situations and contexts, providing flexibility in problem-solving.


Commonly Used Design Patterns in Spring

1. Dependency Injection (DI) Pattern : Dependency Injection is a creational pattern where an object receives its dependencies from an external source rather than creating them itself. In Spring, this is achieved through XML configuration, annotations, or Java-based configuration.

Benefits of Dependency Injection Pattern in Spring:

Loose Coupling: Objects are less dependent on each other, making the system more modular.Easier Testing: Dependencies can be easily mocked or stubbed out.Enhanced Maintainability: Changes to a dependency do not require changes to the dependent class.

In the below example, "UserService" depends on "UserRepository", and Spring injects this dependency.


@Component
public class UserService {
private final UserRepository userRepository;

@Autowired
public UserService(UserRepository userRepository) {
this.userRepository = userRepository;
}
}



----------------------Design Patterns in JaVA----------------------
Creational Design Patterns in Java

1. Factory Method Design Pattern
      This pattern is typically helpful when it's necessary to separate the construction of an object from its implementation.
      With the use of this design pattern, objects can be produced without having to define the exact class of object to be created.

2. Abstract Factory Method Design Pattern
      Abstract Factory pattern is almost similar to Factory Pattern and is considered as another layer of abstraction over factory pattern.
      Abstract Factory patterns work around a super-factory which creates other factories.

3. Singleton Method Design Pattern
      Of all, the Singleton Design pattern is the most straightforward to understand.
      It guarantees that a class has just one instance and offers a way to access it globally.

4. Prototype Method Design Pattern
      Prototype allows us to hide the complexity of making new instances from the client.
      The concept is to copy an existing object rather than creating a new instance from scratch, something that may include costly operations.

5. Builder Method Design Pattern
      To “Separate the construction of a complex object from its representation so that the same construction process can create different representations.” Builder pattern is used
      It helps in constructing a complex object step by step and the final step will return the object.



    

