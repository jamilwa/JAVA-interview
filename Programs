1. for(char c=97; c<= 122; c++)                                                  // will print small abcd

2. for(char c=65; c<= 90; c++)                                                   // will print capital abcd

3. int num = 12345;
   int n = String.valueOf(num).length();                                         // it converts number to String so that we can get number of digits of a number.

4. "I am jamil".replaceAll("\\s+", "");                                          // replaces all whitespace characters like spaces, tabs, new line characters.

5.  Arrays.sort(arr[])                                                             // used to sort array

6.  Arrays.sort(numbers[], Collections.reverseOrder())                             // Sorting the array in descending order. note: it works on object like Integer not on int.

6.  Collections.sort(ArrayList)                                                  // Sorting the list

7.  Collections.sort(ArrayList, Collections.reverseOrder());                     // Sorting the list in descending order 

8.  Collections.sort(personList, Comparator.comparing(Person::getName));         // Sorting the list of Person objects based on name

9.  Collections.sort(personList, Comparator.comparing(Person::getName).thenComparing(Person::getAge));    // Sorting the list of Person objects based on name and then age

10. Collections.sort(personList, Comparator.comparing(Person::getName, Comparator.reverseOrder())
      .thenComparing(Person::getAge, Comparator.reverseOrder()));                 // Sorting the list of Person objects based on name and then age in descending order

11.    Collections.reverse(ArrayList);                                              // Reversing the list
       Collections.shuffle(ArrayList);                                              // Shuffling the list
       Collections.binarySearch(ArrayList, 5);                                      // Binary search
       Collections.frequency(ArrayList, 5);                                         // Frequency of an element
       Collections.unmodifiableCollection(numbers);                                 // Creating an unmodifiable collection
       Collections.synchronizedCollection(numbers);                                 // Creating a synchronized collection

11. str.matches("\\d+")                                                          // it matches strings which contains only digits 

12. Arrays class methods are
               import java.util.Arrays;

               int[] numbers = {1, 2, 3, 4, 5};
               System.out.println("Array: " + Arrays.toString(numbers)); // Output: [1, 2, 3, 4, 5]

               Arrays.sort(numbers);

               int[] copy = Arrays.copyOf(numbers, 3);
               System.out.println("Copied Array: " + Arrays.toString(copy)); // Output: [1, 2, 3]

               int[][] matrix = {
                                 {1, 2, 3},
                                 {4, 5, 6}
                                };
               String result = Arrays.deepToString(matrix);
               System.out.println("Matrix: " + result); // Output: [[1, 2, 3], [4, 5, 6]]   
               

               int[] array1 = {1, 2, 3};
               int[] array2 = {1, 2, 3};
               boolean isEqual = Arrays.equals(array1, array2);

               int index = Arrays.binarySearch(numbers, 3);

13.  List methods 
      ArrayList<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add(1, "Orange"); // Insert "Orange" at index 1


      list.clear();                          // Clear the list
      list.contains("Apple");               // Check if "Apple" is in the list
      list.size()                          // returns size of the list.
      list.remove(0);                     // Remove the first element
      list.set(1, "Orange");             // Replace "Banana" with "Orange"
      list.get(0);                      // Get the first element
      

14.  String, StringBuilder and StringBuffer  methods with example
              String str = "Hello, World!";
              String str1 = "Hello";
              String str2 = "Hello";
              str1.equals(str2);  // Output: true
              str1.equalsIgnoreCase(str2)
             
              str.charAt(1));                      // Output: e
              str.substring(7);                   // From index 7 to the end
              str.substring(0, 5);               // From index 0 to 5 (exclusive)
              str.indexOf("World");             // Output: 7
              str.lastIndexOf("l");            //  Output: 10
              str.toLowerCase();
              str.trim();                     // it removes trailing and beginning spaces.
              str.replace('o', '0'); // Replace 'o' with '0'
             
              String str = "123-456-789";
              System.out.println(str.replaceAll("\\d", "X"));  // Output: XXX-XXX-XXX
              str.contains("World"));  // Output: true
              str.startsWith("Hello"));  // Output: true
              str.isEmpty()  // Output: false

              String result = String.join("-", "Java", "is", "fun");
              Output: Java-is-fun


             StringBuilder sb = new StringBuilder("Hello");
             sb.append(", World!");  // Output: Hello, World!














12. Character class methods are  
      char ch = 'a';

        boolean isLowerCase = Character.isLowerCase(ch)                  // Returns true if the specified character is a lowercase letter.
        char upperCh = Character.toUpperCase(ch);                       // 'A'
        boolean isLetter = Character.isLetter(ch);                     // Returns true if the specified character is a letter.
        boolean isDigit = Character.isDigit(ch);                      // Returns true if the specified character is a digit.
        boolean isLetterOrDigit = Character.isLetterOrDigit(ch);     //  Returns true if the character is a digit or letter.
        boolean isWhitespace = Character.isWhitespace(ch);          //  Returns true if the specified character is a whitespace character.

13. for(Map.Entry<String, Integer> entry : map.entrySet())                                          // iterating map.

14. find palindrome in array using Java 8
    import java.util.Arrays;

      public class PalindromeFinder {
          public static void main(String[] args) {
              String[] array = {"racecar", "hello", "level", "world"};
              System.out.println("Palindromes in the array: " + findPalindromes(array));
          }
      
          public static String[] findPalindromes(String[] array) {
              return Arrays.stream(array)
                      .filter(PalindromeFinder::isPalindrome)
                      .toArray(String[]::new);
          }
      
          public static boolean isPalindrome(String word) {
              int left = 0;
              int right = word.length() - 1;
      
              while (left < right) {
                  if (word.charAt(left++) != word.charAt(right--)) {
                      return false;
                  }
              }
      
              return true;
          }
      }

15. find the non repeating character in a string 
            public static char firstNonRepeatedCharacter(String input) {
              Map<Character, Integer> charCount = new HashMap<>();
              for (char ch : input.toCharArray()) {
                  charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);
              }
      
              // Step 2: Find the first character with a count of 1
              for (char ch : input.toCharArray()) {
                  if (charCount.get(ch) == 1) {
                      return ch;
                  }
              }
      
              return '\0'; // return null character if all characters are repeated
          }


         // just modify the second for loop like below to find duplicate characters in a string
            for (char ch : input.toCharArray()) {
                  if (charCount.get(ch) > 1) {
                      return ch;
                  }
              }


      // if both character and their count is needed then used map.entrySet in the 2nd for loop like below
         for(Map.Entry<String, Integer> entry : map.entrySet()) 


      // same above logic can be used to find non repeating words and duplicate words in a sentence with few modifications


16. 

17.  find all permutations of a string 
                  public static void generatePermutations(String str, String ans) {
                       if (str.length() == 0) {
                           System.out.println(ans);
                           return;
                       }
               
                       for (int i = 0; i < str.length(); i++) {
                           char ch = str.charAt(i);
                           String remaining = str.substring(0, i) + str.substring(i + 1);
                           generatePermutations(remaining, ans + ch);
                       }

18.  to find vowels and consonants from a string
            public static int[] countVowelsAndConsonants(String input) {
              int vowelsCount = 0, consonantsCount = 0;
      
              for (char c : input.toLowerCase().toCharArray()) {
                  if (c >= 'a' && c <= 'z') { // Ensure character is a letter
                      if ("aeiou".indexOf(c) != -1) {
                          vowelsCount++;
                      } else {
                          consonantsCount++;
                      }


19.   to find if a string has unique chars or not using jqva 8
      static boolean hasaUniqueChars(String str) {
          return Arrays.stream(str.toLowerCase().split("")).distinct().count() == str.length();
      }

20. find if an array is sub set of another array
          class GfG {

     static boolean isSubset(int[] a, int[] b) {
        // Iterate over each element in the second array
        int m = a.length;
        int n = b.length;
        for (int i = 0; i < n; i++) {
            boolean found = false;
            // Check if the element exists in the first array
            for (int j = 0; j < m; j++) {
                if (b[i] == a[j]) {
                    found = true;
                    break;
                }
            }
            // If any element is not found, return false
            if (!found) return false;
        }
        // If all elements are found, return true
        return true;
    }

    public static void main(String[] args) {
        int[] a = {11, 1, 13, 21, 3, 7};
        int[] b = {11, 3, 7, 1};

        if (isSubset(a, b)) {
            System.out.println("true");
        } else {
            System.out.println("false");
        }
    }
     }



21.  method to split a string at capital letters and then capitalize each word first letter and add underscore.
         example:  input =   "inThisWorld"
                   output =  "in_This_World"

      public static String formatString(String str){
            String[] strCapsArray = str.split("(?=[A-Z])");    // splits string at capital letters without missing the letter.
   
            String newStr = strCapsArray[0];
            for(int i = 1; i < strCapsArray.length; i++){
                strCapsArray[i].substring(0, 1).toUpperCase().concat(strCapsArray[i].substring(1));
                newStr = newStr+"_"+strCapsArray[i];
             }
                
          return newStr;
        }
