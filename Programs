
14. find palindrome in array using Java 8
    import java.util.Arrays;
     
          public static String[] findPalindromes(String[] array) {
              return Arrays.stream(array)
                      .filter(PalindromeFinder::isPalindrome)
                      .toArray(String[]::new);
          }
      
          public static boolean isPalindrome(String word) {
              int left = 0;
              int right = word.length() - 1;
      
              while (left < right) {
                  if (word.charAt(left++) != word.charAt(right--)) {
                      return false;
                  }
              }
      
              return true;
          }
      

15. find the non repeating character in a string 
            public static void duplicateChar(String input){
                String newStr = input.replaceAll("\\s+", "").toLowerCase();
                Map<Character, Integer> charCount = new HashMap<>();
                
                for (char ch : newStr.toCharArray()) {
                    charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);
                }

            // Step 2: Find the repeated characters
                for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
                    if (entry.getValue() > 1) {
                        System.out.println(entry.getKey());
                    }
                }


         // just modify the second for loop like below to find unique characters in a string
            for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
                    if (entry.getValue() == 1) {
                        System.out.println(entry.getKey());
                    }
                }

      // same above logic can be used to find non repeating words and duplicate words in a sentence with few modifications


16. 

17.  find all permutations of a string 
                  public static void generatePermutations(String str, String ans) {
                       if (str.length() == 0) {
                           System.out.println(ans);
                           return;
                       }
               
                       for (int i = 0; i < str.length(); i++) {
                           String remaining = str.substring(0, i) + str.substring(i + 1);
                           generatePermutations(remaining, ans + str.charAt(i));
                       }

18.  to find vowels and consonants from a string
            public static int[] countVowelsAndConsonants(String input) {
              int vowelsCount = 0, consonantsCount = 0;
      
              for (char c : input.toLowerCase().toCharArray()) {
                  if (c >= 'a' && c <= 'z') { // Ensure character is a letter
                      if ("aeiou".indexOf(c) != -1) {
                          vowelsCount++;
                      } else {
                          consonantsCount++;
                      }


19.   to find if a string has unique chars or not using jqva 8
      static boolean hasaUniqueChars(String str) {
          return Arrays.stream(str.toLowerCase().split("")).distinct().count() == str.length();
      }

20. find if an array is sub set of another array
     
    static boolean isSubset(int[] a, int[] b) {
        int m = a.length;
        int n = b.length;
        for (int i = 0; i < n; i++) {
            boolean found = false;
            // Check if the element exists in the first array
            for (int j = 0; j < m; j++) {
                if (b[i] == a[j]) {
                    found = true;
                    break;
                }
            }
            // If any element is not found, return false
            if (!found) return false;
        }
        // If all elements are found, return true
        return true;
    }


21.  method to split a string at capital letters and then capitalize each word first letter and add underscore.
         example:  input =   "inThisWorld"
                   output =  "in_This_World"

      public static String formatString(String str){
            String[] strCapsArray = str.split("(?=[A-Z])");    // splits string at capital letters without missing the letter.
   
            String newStr = strCapsArray[0];
            for(int i = 1; i < strCapsArray.length; i++){
                strCapsArray[i].substring(0, 1).toUpperCase().concat(strCapsArray[i].substring(1));
                newStr = newStr+"_"+strCapsArray[i];
             }
                
          return newStr;
        }


22. reverse a string, without using builtin methods
        String input = "ansari";
        char[] inputArr = input.toCharArray();
        String reversed = "";
        for(int i = inputArr.length-1 ; i>=0; i--){
            reversed=reversed+(inputArr[i]);
        }


1. for(char c=97; c<= 122; c++)                                                  // will print small abcd

2. for(char c=65; c<= 90; c++)                                                   // will print capital abcd

3. int num = 12345;
   int n = String.valueOf(num).length();                                         // it converts number to String so that we can get number of digits of a number.

4. "I am jamil".replaceAll("\\s+", "");                                          // replaces all whitespace characters like spaces, tabs, new line characters.

5.  Arrays.sort(arr[])                                                             // used to sort array

6.  Arrays.sort(numbers[], Comparator.reverseOrder())                             // Sorting the array in descending order. note: it works on object like Integer not on int.

6.  Collections.sort(ArrayList)                                                  // Sorting the list

7.  Collections.sort(ArrayList, Comparator.reverseOrder());                     // Sorting the list in descending order 

8.  Collections.sort(personList, Comparator.comparing(Person::getName));         // Sorting the list of Person objects based on name

9.  Collections.sort(personList, Comparator.comparing(Person::getName).thenComparing(Person::getAge));    // Sorting the list of Person objects based on name and then age

10. Collections.sort(personList, Comparator.comparing(Person::getName, Comparator.reverseOrder())
      .thenComparing(Person::getAge, Comparator.reverseOrder()));                 // Sorting the list of Person objects based on name and then age in descending order

10.  List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
        // Custom comparator to sort by length of names
        Comparator<String> byLength = Comparator.comparingInt(String::length);


11.    Collections.reverse(ArrayList);                                              // Reversing the list
       Collections.shuffle(ArrayList);                                              // Shuffling the list
       Collections.binarySearch(ArrayList, 5);                                      // Binary search
       Collections.frequency(ArrayList, 5);                                         // Frequency of an element
       Collections.unmodifiableCollection(numbers);                                 // Creating an unmodifiable collection
       Collections.synchronizedCollection(numbers);                                 // Creating a synchronized collection

11. str.matches("\\d+")                                                          // it matches strings which contains only digits 

12.   

14.  String, StringBuilder and StringBuffer  methods with example
              String str = "Hello, World!";
              String str1 = "Hello";
              String str2 = "Hello";
              str1.equals(str2);  // Output: true
              str1.equalsIgnoreCase(str2)
             
              str.charAt(1));                          // Output: e
              str.substring(7);                       // From index 7 to the end
              str.substring(0, 5);                   // From index 0 to 5 (exclusive)
              str.indexOf("World");                 // Output: 7
              str.lastIndexOf("l");                //  Output: 10
              str.toLowerCase();
              str.trim();                         // it removes trailing and beginning spaces.
              str.replace('o', '0');             // Replace 'o' with '0'
             
              String str = "123-456-789";
              str.replaceAll("\\d", "X"));                  // Output: XXX-XXX-XXX
              str.contains("World"));                      // Output: true
              str.startsWith("Hello"));                   // Output: true
              str.isEmpty()                              // Output: false

              String.join("-", "Java", "is", "fun");       // Output: Java-is-fun


             StringBuilder sb = new StringBuilder("Hello");
             sb.append(", World!");                                              // Output: Hello, World!
             sb.insert(6, "Beautiful ")                                         // Output: Hello Beautiful World!
             sb.replace(7, 11, "Java")                                         // Output: Hello, Java!
             sb.delete(5, 7)                                                  // Output: HelloWorld!
             sb.deleteCharAt(5);                                             // Output: Hello World!
             sb.reverse()                                                   // Output: olleH
             sb.capacity());                                               // Output: 21 (Default is 16 + string length)
             sb.setCharAt(1, 'a');                                        // Output: Hallo
             sb.toString();                                              // Output: Hello, World!

15.   Integer class methods
      String str = "123";
      int num = Integer.parseInt(str);           // Output: 123.      Converts a String to a primitive int.
      Integer num = Integer.valueOf("123");      // Output: 123.     Converts a String to an Integer object.
      Integer.toString(100)                      // Output: "100".
      Integer.compare(5, 10));                   // Output: -1
      Integer.max(10, 20));                      // Output: 20
      Integer.sum(10, 20));                      // Output: 30
      Integer.toBinaryString(10));
      Integer.toHexString(255));                // Output: "ff"
      Integer.toOctalString(8));                // Output: "10"
      
12. Character class methods are  
      char ch = 'a';

        boolean isLowerCase = Character.isLowerCase(ch)                  // Returns true if the specified character is a lowercase letter.
        char upperCh = Character.toUpperCase(ch);                       // 'A'
        boolean isLetter = Character.isLetter(ch);                     // Returns true if the specified character is a letter.
        boolean isDigit = Character.isDigit(ch);                      // Returns true if the specified character is a digit.
        boolean isLetterOrDigit = Character.isLetterOrDigit(ch);     //  Returns true if the character is a digit or letter.
        boolean isWhitespace = Character.isWhitespace(ch);          //  Returns true if the specified character is a whitespace character.

13. for(Map.Entry<String, Integer> entry : map.entrySet())                                          // iterating map.
