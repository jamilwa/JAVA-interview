1. for(char c=97; c<= 122; c++)                                                  // will print small abcd

2. for(char c=65; c<= 90; c++)                                                   // will print capital abcd

3. int num = 12345;
   int n = String.valueOf(num).length();                                         // it converts number to String so that we can get number of digits of a number.

4. "I am jamil".replaceAll("\\s+", "");                                          // replaces all whitespace characters like spaces, tabs, new line characters.

5.  Arrays.sort(arr[])                                                             // used to sort array

6.  Arrays.sort(numbers[], Collections.reverseOrder())                             // Sorting the array in descending order. note: it works on object like Integer not on int.

6.  Collections.sort(ArrayList)                                                  // Sorting the list

7.  Collections.sort(ArrayList, Collections.reverseOrder());                     // Sorting the list in descending order 

8.  Collections.sort(personList, Comparator.comparing(Person::getName));         // Sorting the list of Person objects based on name

9.  Collections.sort(personList, Comparator.comparing(Person::getName).thenComparing(Person::getAge));    // Sorting the list of Person objects based on name and then age

10. Collections.sort(personList, Comparator.comparing(Person::getName, Comparator.reverseOrder())
      .thenComparing(Person::getAge, Comparator.reverseOrder()));                 // Sorting the list of Person objects based on name and then age in descending order

11.    Collections.reverse(ArrayList);                                              // Reversing the list
       Collections.shuffle(ArrayList);                                              // Shuffling the list
       Collections.binarySearch(ArrayList, 5);                                      // Binary search
       Collections.frequency(ArrayList, 5);                                         // Frequency of an element
       Collections.unmodifiableCollection(numbers);                                 // Creating an unmodifiable collection
       Collections.synchronizedCollection(numbers);                                 // Creating a synchronized collection

11. str.matches("\\d+")                                                          // it matches strings which contains only digits 

12. Character class methods are   
        isDigit(char ch): Returns true if the specified character is a digit.
        isLetter(char ch): Returns true if the specified character is a letter.
        isLetterOrDigit(char ch): Returns true if the specified character is a letter or a digit.
        isWhitespace(char ch): Returns true if the specified character is a whitespace character.
13. for(Map.Entry<String, Integer> entry : map.entrySet())                                          // iterating map.

14. find palindrome in array using Java 8
    import java.util.Arrays;

      public class PalindromeFinder {
          public static void main(String[] args) {
              String[] array = {"racecar", "hello", "level", "world"};
              System.out.println("Palindromes in the array: " + findPalindromes(array));
          }
      
          public static String[] findPalindromes(String[] array) {
              return Arrays.stream(array)
                      .filter(PalindromeFinder::isPalindrome)
                      .toArray(String[]::new);
          }
      
          public static boolean isPalindrome(String word) {
              int left = 0;
              int right = word.length() - 1;
      
              while (left < right) {
                  if (word.charAt(left++) != word.charAt(right--)) {
                      return false;
                  }
              }
      
              return true;
          }
      }

15. find the non repeating character in a string 
            public static char firstNonRepeatedCharacter(String input) {
              Map<Character, Integer> charCount = new HashMap<>();
              for (char ch : input.toCharArray()) {
                  charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);
              }
      
              // Step 2: Find the first character with a count of 1
              for (char ch : input.toCharArray()) {
                  if (charCount.get(ch) == 1) {
                      return ch;
                  }
              }
      
              return '\0'; // return null character if all characters are repeated
          }


         // just modify the second for loop like below to find duplicate characters in a string
            for (char ch : input.toCharArray()) {
                  if (charCount.get(ch) > 1) {
                      return ch;
                  }
              }


      // if both character and their count is needed then used map.entrySet in the 2nd for loop like below
         for(Map.Entry<String, Integer> entry : map.entrySet()) 


      // same above logic can be used to find non repeating words and duplicate words in a sentence with few modifications


16.  to find palindrome without using the reverse method from StringBuilder
                public static boolean isPalindrome(String str) {
                   String cleaned = str.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
                        int left = 0;
                        int right = cleaned.length() - 1;
                        while (left < right) {
                           if (cleaned.charAt(left) != cleaned.charAt(right)) {
                               return false;  // It's not a palindrome if there's a mismatch
                              }
                           left++;
                           right--;
                       }
                       return true;
                }
    

17.  find all permutations of a string 
                  public static void generatePermutations(String str, String ans) {
                       if (str.length() == 0) {
                           System.out.println(ans);
                           return;
                       }
               
                       for (int i = 0; i < str.length(); i++) {
                           char ch = str.charAt(i);
                           String remaining = str.substring(0, i) + str.substring(i + 1);
                           generatePermutations(remaining, ans + ch);
                       }

18.  to find vowels and consonants from a string
            public static int[] countVowelsAndConsonants(String input) {
              int vowelsCount = 0, consonantsCount = 0;
      
              for (char c : input.toLowerCase().toCharArray()) {
                  if (c >= 'a' && c <= 'z') { // Ensure character is a letter
                      if ("aeiou".indexOf(c) != -1) {
                          vowelsCount++;
                      } else {
                          consonantsCount++;
                      }


19.   to find if a string has unique chars or not using jqva 8
      static boolean hasaUniqueChars(String str) {
          return Arrays.stream(str.toLowerCase().split("")).distinct().count() == str.length();
      }
