1. What is the Collection framework in Java?
        Collection Framework is a group of classes and interfaces that is used to store and manage the objects.

2. Distinguish between ArrayList and Vector in the Java collection framework.

    ArrayList	                                                  Vector
ArrayList is cannot be synchronized.	          Vector can be is synchronized (only one thread at a time can access the code)
It is fast                                        It is slow.      
ArrayList is not thread-safe.	                  Vector is a thread-safe.
It can increase its size by 50%.	          It can increase its size by doubling the size of the array.
It is not a legacy class.	                  It is a legacy class.

3.              Array                                                                          Arraylist 
    Array is static in size.	                                                ArrayList is dynamic in size.
    It is mandatory to provide the size of an array while using new keyword     We can create an instance of ArrayList without specifying its size. 
     ex:   int[] myArray = new int[6];                                               initial capacity is 10.
           myArray[0] = 3;
    It performs fast because of fixed size.	                                The resize operation slows down the performance.
    length variable to determine the size of an array.	                        size() method to determine the size of ArrayList.
    stores both objects and primitives type.	                                doesn't store primitive type. It automatically converts primitive type to object.
    can add elements in an array by using the assignment operator.	        the add() method to add elements in the ArrayList.
    throws ArrayIndexOutofBoundException					throws IndexOutofBoundException

Arrays class methods are    (ABCDES) ---- Array BinarySearch CopyOf DeepToString Equals Sort
               import java.util.Arrays;

               int[] numbers = {1, 2, 3, 7, 4, 5};
    String     Arrays.toString(numbers));                      // Output: [1, 2, 3, 7, 4, 5]
    void       Arrays.sort(numbers);                          // Output: [1, 2, 3, 4, 5, 7]
               Arrays.sort(numbers[], Comparator.reverseOrder())           // Sorting the array in descending order. note: it works on object like Integer not on int.
               Arrays.sort(numbers, 3,5);                                 // sorts only numbers falling between fromIndex 3 and toIndex 5


               int[] copy = Arrays.copyOf(numbers, 3);
               Arrays.toString(copy));                         // Output: [1, 2, 3]

               int[][] matrix = {
                                 {1, 2, 3},
                                 {4, 5, 6}
                                };
               Arrays.deepToString(matrix);                    // Output: [[1, 2, 3], [4, 5, 6]]   
               

               int[] array1 = {1, 2, 3};
               int[] array2 = {1, 2, 3};
               Arrays.equals(array1, array2);                    // output: true

               Arrays.binarySearch(numbers, 3);                  // output:  2 which is the index position of the value 3

List methods   (LAACCSS GR) -- List Add AddAll Contains Clear Size Set Get Remove
        a. List<String> list1 = Arrays.asList("jamil", "ansari")            // we use classes to implement an interface, LHS should always be an interface and RHS a class
	b. Collection<String> list2 = Arrays.asList("jamil", "ansari")      // we can either use the interface or its parent interface to implement it. Collection is parent of all interfaces
	c. ArrayList<Integer> list3 = new ArrayList<>()                     // this is empty list with size zero
	
        ArrayList<String> list = new ArrayList<>();
        list.add("Apple");                        // Adds an element to the end of the list
        list.add("Banana");
        list.add(1, "Orange");                  // Insert "Orange" at index 1 and moves banana to index 2 position.


      list.clear();                          // Clear the list
      list.contains("Apple");               // Check if "Apple" is in the list
      list.size()                          // returns size of the list.
      list.remove(0);                     // Remove the first element
      list.set(1, "Orange");             // Replace "Banana" with "Orange"
      list.get(0);                      // Get the first element
      list.addAll(list3)       		// to copy one list to another list

4. The ArrayList size increases dynamically by 50% because whenever the ArrayList class requires to resize then it will create a new array of 50% bigger size and copies all 
    the elements from the old array to the new array. the DEFAULT_CAPACITY is 10.
    example
    ArrayList<String> ar = new ArrayList<>()                           // the default constructor capacity is 10. 

   if we know the initial capacity of the arrayList then its better to mention it in the ArrayList declaration, like below so that it doesnt become slow due to resizing.
        ArrayList<Integer> list3 = new ArrayList<>(50)      // it will add elements to same array instead of creating new array untill its size reaches to 50.

     
    
5. Differentiate between Iterator and ListIterator interfaces.

    Iterator	                                                                                ListIterator
The Iterator can traverse the array elements in the forward direction.	            ListIterator can traverse the array elements in backward as well as forward directions.
used in Map, List, and Set.                               	                    used in List like ArrayList, LinkedList.
It can perform only remove() operation after calling next()                         It can perform add, remove, and set operation while traversing the collection.
Iterator cannot add or replace elements throws ConcurrentModificationException      can add or replace an element with the help of add(E e), set(E e) methods.
Indexes cannot be obtained by using Iterator.                                       nextIndex() and previousIndex() helps to obtain indexes of elements at any time.
methods of Iterator are next(), remove() and hasNext()                              methods of ListIterator are next(), previous(), hasNext(), hasPrevious(), add(E e), set(E e)
example:   Iterator<String> itr = ar.iterator();                                    example: ListIterator<String> itr = ar.listIterator();
           while(itr.hasNext()){                                                             while (itr.hasNext()) {
                System.out.println(itr.next());                                                  System.out.println(itr.next());                                                 


6. What is the difference between Hashmap and Hashtable?

        Hashmap	                                                        Hashtable
It is not synchronized.	                                                It is synchronized.
HashMap allows one null key                             	            HashTable does not allow null key.
Iterator is used to traverse HashMap.	                                Either Iterator or Enumerator is used for traversing a HashTable.
It is fail-fast.                                                        It is fail-safe.
faster than HashTable.	                                                slower than HashMap.

7. An easy-to-remember acronym for common Set methods in Java could be "AIS". Here's what each letter represents:
   A: add() - Adds an element to the set.
   I: isEmpty() - Checks if the set is empty.
   S: size() - Returns the number of elements in the set.

8. easy-to-remember acronym for common ArrayList methods in Java could be "CRUD". Here's what each letter represents:
    C: add() - Adds an element to the ArrayList.R: get() - Retrieves an element from the ArrayList based on its index.U: set() - Updates an element in the ArrayList
	at a specified index.D: remove() - Deletes an element

09. what is hashing? 
    the process of converting an object or data structure into a hash code(numerical value), using a hashing algorithm. 
    Hashing is commonly used for indexing data in HashMap, ensuring data integrity, and optimizing search operations.

10.   Access modifiers
        Default (Package-Private): accessible only within its own package.    DOP
        Protected: accessible in subclasses of other packages.  ProSOP

11. How to make collection threadsafe
	1. Using Synchronized Collections : Java provides synchronized wrappers for collections through the Collections.synchronizedXXX methods like 
		Collections.synchronizedList(), Collections.synchronizedSet(), Collections.synchronizedMap.
	
	examplee:   
	List<Integer> list = Collections.synchronizedList(new ArrayList<>());

        // Adding elements to the synchronized list
        list.add(1);
        list.add(2);
        list.add(3);

        // Iterating over the synchronized list
        synchronized (list) { // Must synchronize on the list when iterating
            for (Integer number : list) {
                System.out.println(number);

	2. Using Concurrent Collections : Java provides a set of concurrent collections in the java.util.concurrent package. 
	example:
		ConcurrentHashMap: A thread-safe variant of HashMap that allows concurrent read and write operations.
		CopyOnWriteArrayList: A thread-safe variant of ArrayList where all mutative operations (like add, set, etc.) are implemented by making a fresh copy of the underlying array.
		ConcurrentSkipListSet: This is a thread-safe variant of NavigableSet that uses a skip list for its underlying data structure. It allows concurrent access and maintains a sorted order.
		BlockingQueue: An interface that represents a thread-safe queue that supports operations that wait for the queue to become non-empty when retrieving an element and wait for
				space to become available in the queue when storing an element.
	3. Using ThreadLocal : If you want to maintain a separate instance of a collection for each thread, you can use ThreadLocal. This is useful when you want to avoid contention between threads.


12. Different types of map classes
1. HashMap
	Description: A hash table-based implementation of the Map interface. It allows null values and one null key. It does not guarantee the order of the elements.
	Performance: Offers average time complexity of O(1) for get() and put() operations.
	Use Case: When you need a fast, unordered collection of key-value pairs.

2. LinkedHashMap
	Description: A hash table and linked list implementation of the Map interface. It maintains a doubly-linked list of the entries, which allows to maintain insertion order.
	Performance: Similar to HashMap, with O(1) time complexity for get() and put().
	Use Case: When you need insertion order.

3. TreeMap
	Description: A red-black tree-based implementation of the Map interface. It stores the keys in a sorted order (natural ordering or by a specified comparator).
	Performance: Offers O(log n) time complexity for get(), put(), and remove() operations.
	Use Case: When you need a sorted map.

4. Hashtable
	Description: A legacy class that implements the Map interface. It is synchronized and does not allow null keys or values.
	Performance: Similar to HashMap, but with overhead due to synchronization.
	Use Case: When you need a thread-safe map, but it is generally recommended to use ConcurrentHashMap instead.

5. ConcurrentHashMap
	Description: A thread-safe variant of HashMap that allows concurrent access by multiple threads. It does not allow null keys or values.
	Performance: Offers better performance than Hashtable in concurrent scenarios due to its segmented locking mechanism.
	Use Case: When you need a thread-safe map with high concurrency.

6. WeakHashMap
	Description: A hash table-based implementation of the Map interface that uses weak references for keys. If a key is no longer in ordinary use, it can be garbage collected.
	Performance: Similar to HashMap, but with the added behavior of allowing keys to be collected when no strong references exist.
	Use Case: When you want to allow keys to be garbage collected when they are no longer in use.

7. IdentityHashMap
	Description: A hash table-based implementation of the Map interface that uses reference equality (==) instead of object equality (equals()) when comparing keys.
	Performance: Similar to HashMap, but with different equality semantics.
	Use Case: When you need to compare keys based on reference equality.

13. if we have Collection.SynchronizedMap() then why to use concurrentHashmap
	Collections.synchronizedMap(): Provides serial access, meaning only one thread can access the map at a time for read or write operations. This can lead to increased waiting times
				       		and reduced performance when multiple threads are involved.
				       Supports null keys and values, depending on the underlying map implementation.
				       The iterator is fail-fast, meaning it throws a ConcurrentModificationException if the map is modified while iterating
					Suitable for applications where data consistency is more critical than performance.
	ConcurrentHashMap: Allows multiple threads to read and write concurrently. It uses a segmented locking mechanism, which means that only a portion of the map is locked during write
				      		operations, allowing for higher throughput.
				       Does not allow null keys or values, which helps avoid ambiguity in concurrent environments.
				       The iterator is fail-safe, allowing modifications during iteration without throwing exceptions.
					Ideal for high-performance applications where multiple threads frequently read and write data.



14. Different Set classes
1. HashSet
	Description: A hash table-based implementation of the Set interface. It does not guarantee the order of the elements and allows null values.
	Performance: Offers average time complexity of O(1) for basic operations like add(), remove(), and contains().
	Use Case: When you need a fast, unordered collection of unique elements.
2. LinkedHashSet
	Description: A hash table and linked list implementation of the Set interface. It maintains a doubly-linked list of the entries, which allows to maintain insertion order).
	Performance: Similar to HashSet, with O(1) time complexity for basic operations.
	Use Case: When you need to maintain (insertion order).
3. TreeSet
	Description: A red-black tree-based implementation of the Set interface. It stores the elements in a sorted order (natural ordering or by a specified comparator).
	Performance: Offers O(log n) time complexity for basic operations like add(), remove(), and contains().
	Use Case: When you need a sorted set.
4. EnumSet
	Description: A specialized Set implementation for use with enum types. It is highly efficient and can be used to represent a set of enum constants.
	Performance: Offers O(1) time complexity for basic operations.
	Use Case: When you need a set specifically for enum types.
	EnumSet<Day> enumSet = EnumSet.of(Day.MONDAY, Day.WEDNESDAY);

5. CopyOnWriteArraySet
	Description: A thread-safe variant of Set that uses a copy-on-write mechanism. All mutative operations (like add, remove, etc.) are implemented by making a fresh copy of the underlying array.
	Performance: Suitable for scenarios where reads are more frequent than writes.
	Use Case: When you need a thread-safe set with a high read-to-write ratio.
6. ConcurrentSkipListSet
	Description: A thread-safe variant of NavigableSet that uses a skip list for its underlying data structure. It allows concurrent access and maintains a sorted order.
	Performance: Offers O(log n) time complexity for basic operations.
	Use Case: When you need a thread-safe, sorted set.



15.  			ArrayList														LinkedList

1) ArrayList internally uses a dynamic array to store the elements.							LinkedList internally uses a doubly linked list to store the elements.
2) slow because If any element is removed from the array, all the other elements are shifted in memory.			fast because it uses a doubly linked list, so no bit shifting is required in memory.
3) act as a list only because it implements List only.									act as a list and queue both because it implements List and Deque interfaces.
4) better for storing and accessing data.										better for manipulating data.
5) The memory location for the elements of an ArrayList is contiguous.							The location for the elements of a linked list is not contagious.
6) when an ArrayList is initialized, a default capacity of 10 is assigned to the ArrayList. 				no default capacity in a LinkedList. an empty list is created when a LinkedList is initialized.

