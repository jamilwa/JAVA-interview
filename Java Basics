
 1. What is Static Keyword in Java
      Memory Management:  Static variables are allocated memory only once when the class is loaded, which helps in conserving memory when multiple instances of a class
                          are created.

     The static keyword can be applied to:
     Variables: Static variables are initialized only once at the start of the execution of the program. If not explicitly initialized, they are assigned default 
                values (e.g., 0 for integers, null for objects). They are also known as class variables. 
                A single copy of a static variable is shared among all instances of the class.
     Methods: Static methods and variables can be accessed directly using the class name and doesn't need any object. 
     Blocks: Static blocks are executed when the class is loaded, before the main method is executed. They are also Known as static initialization blocks.
     Nested Classes: Static nested classes can be defined within a class.

     THIS and SUPER cannot be used in static contexts because they refer to instance-specific data. THIS refers to the current object, and SUPER refers to the superclass
     of the current object.

     Static methods cannot be overridden. If a subclass defines a static method with the same name and parameters as a static method in the superclass, 
     it is known as method hiding, not overriding. The method that gets called is determined by the reference type, not the object type. 


 2. How many types of variables are found in java
     1. Instance Variables: declared inside the class but outside the method. Belong to an instance of a class; each object has its own copy.
           The scope of instance variables is the entire class, and they can be accessed by all methods of the class. 
     2. Static Variables:  A variable which is declared as static is called static variable. It cannot be local. Belong to the class; shared among all instances.
           The scope of static variables is the entire class, similar to instance variables, but they are accessed through the class itself rather than through instances.
     3. Local Variables: A variable declared inside the body of a method, constructor, or block is called a local variable. Local variables are only accessible within
           the method, constructor, or block where they are defined. Local variables must be initialized before they are used.
           The scope of local variables is limited to the method or block in which they are defined. Local variables are created when the method is called and destroyed
           when the method exits. They do not retain their values between method calls.
     4. Parameters: Passed to methods or constructors; treated as local variables within those methods.

     Encapsulation and Data Hiding: Instance and local variables support encapsulation, allowing for better control over how data is accessed and modified.
     Memory Efficiency: Static and local variables help manage memory more efficiently by ensuring that memory is allocated only when needed.
 
3) What is Java instanceOf operator?
     The instanceof operator in Java is a binary operator used to test whether an object is an instance of a specific class or interface. It helps determine the type
     of an object at runtime, which is particularly useful in scenarios involving polymorphism and type checking. It returns either true or false. 
     NULL CHECK : If we apply the instanceof operator with any variable that has a null value, it returns false. 
     TYPE CHECK : used for type checking before performing type casting. This helps avoid ClassCastException at runtime. 
     INHERITANCE : this checks not only the direct type of the object but also its superclasses. For example, if B is a subclass of A, then an object of type B
                   will return true when checked against A. 
     INTERFACES : It can also be used to check if an object implements a specific interface.

example. 
      class Simple1{ 
        public static void main(String args[]){
        Simple1 s=new Simple1(); 
        System.out.println(s instanceof Simple1);//true 

Note : An object of subclass type is also a type of parent class. For example, if Dog extends Animal 
then object of Dog can be referred by either Dog or Animal class. 

4) What is the abstraction?    HIDSOF
    Abstraction is a process of hiding the implementation details and showing only functionality to the user.  Abstraction enables you to focus on what the object does
   instead of how it does it. It can be achieved through abstract classes and interfaces in Java.

5) What is the difference between abstraction and encapsulation?
    Abstraction hides the implementation details whereas encapsulation wraps code and data into a single unit.
    The main purpose of encapsulation is to protect the internal state of an object and ensure that it can only be modified in controlled ways. 
    This enhances data integrity and security.
    Encapsulation is achieved using:
    Access Modifiers: Keywords like private, protected, and public that control the visibility of class members (variables and methods).
    Getters and Setters: Public methods that allow controlled access to private variables.

 6) What is the abstract class?
     A class that is declared as abstract is known as an abstract class. It needs to be extended and its method implemented. It cannot be instantiated. 
     It can have abstract methods, non-abstract methods, constructors, and static methods. It can also have the final methods which will force the subclass 
     not to change the body of the method.
     Abstract classes are useful for shared behavior for a group of related classes, promoting code reuse.

 7) Can you use abstract and final both with a method?
       No, because we need to override the abstract method to provide its implementation, whereas we can't override the final method. 

8) Is it possible to instantiate the abstract class?
    No, the abstract class can never be instantiated. If its instantiated then the purpose of abstract class is defeated.

9) What is the interface?
 The interface is a blueprint for a class that has only constants (static final variables) and abstract methods. It is used to achieve full abstraction and 
 multiple inheritance. There can be only abstract methods in the Java interface, not method body. Java Interface also represents the IS-A relationship. It cannot be
 instantiated just like the abstract class. However, we need to implement it to define its methods. Traditionally, interfaces could only contain abstract methods.
 However, since Java 8, interfaces can also include:
 Default Methods:  Methods with a body that can provide default behavior. Implementing classes can choose to override these methods.
 Static Methods:  Methods that belong to the interface itself and can be called without an instance of the interface.
 Private Methods:  Methods that can be used within the interface to share code between default methods.

10) What is a marker interface?
    A marker interface is an interface that does not contain any methods or fields. Its primary purpose is to provide metadata about a class to the 
    Java runtime or to other parts of the program. The syntax for it is like below
       public interface Serializable{ } 

   Common Examples of Marker Interfaces
     Serializable: Serializable interface indicates that its objects can be serialized (converted into a byte stream) and deserialized (reconstructed from a byte stream).
     Cloneable: Cloneable interface indicates that it allows its objects to be cloned (i.e., creating a copy of the object).
     Remote: In Java RMI (Remote Method Invocation), the Remote interface indicates that a class can be used to define remote objects.


11) what is Exception propagation
    When an exception is thrown, the Java Virtual Machine (JVM) looks for a suitable exception handler in the current method. If it does not find one, the exception 
    is propagated to the calling method, and this process continues until a handler is found or the program terminates.

12) What is String Pool?
    The String Pool in Java, also known as the String Intern Pool, is a special memory area in the Java heap where Java stores string literals. is used to optimize
    memory usage and improve performance. The main advantage of using the String pool is whenever we create a string literal; the JVM checks 
    the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool,
    a new string instance is created and placed in the pool.

    String Literals: When you create a string using double quotes, it is stored in the String Pool.
    The new Keyword: When you create a string using the new keyword, a new string object is created in the heap, even if an identical string exists in the String Pool.

    The statement String str3 = new String("Hello");   creates two objects in memory:
        One in the String Pool (for the literal "Hello").
        One in the heap (for the new String("Hello")).

13)  Difference between StringBuffer and StringBuilder
       StringBuffer is thread-safe and suitable for multi-threaded environments but is slower due to synchronization.
       StringBuilder is not thread-safe but is faster and more efficient for single-threaded applications.

14)  What is Garbage Collection?
     Garbage Collection (GC) in Java is an automatic memory management process that helps in reclaiming memory by removing objects that are no longer in use or reachable
     in a program. This process is to ensure efficient memory usage in applications. 
     GC is automatic, meaning that developers do not need to manually free memory. The Java Virtual Machine (JVM) handles this process, allowing developers to focus
     on application logic rather than memory management.
     Garbage Collection (GC) runs periodically and can be triggered by various factors, such as memory pressure or explicit requests from the application.
     Memory Management:  In Java, memory is divided into several areas, primarily the Heap and the Stack. The Heap is where objects are allocated, while the Stack is
                         used for method calls and local variables. When an object is created, memory is allocated for it in the Heap. Once there are no references to
                         that object, it becomes eligible for garbage collection. 

     Types of Garbage Collection
         1.  Serial Garbage Collector: A simple, single-threaded garbage collector that is suitable for small applications with a single thread. It pauses all 
             application threads during garbage collection.
         2. Parallel Garbage Collector: A multi-threaded garbage collector that uses multiple threads to perform garbage collection in parallel. It is suitable
            for applications that require high throughput.

     Garbage Collection Process - The garbage collection process generally involves the following steps:
         Marking: The garbage collector identifies which objects are reachable and marks all reachable objects.
         Sweeping: After marking, the garbage collector sweeps through the heap and collects all unmarked (unreachable) objects, reclaiming their memory.
         Compacting (optional): In some garbage collection algorithms, the memory is compacted to reduce fragmentation. This involves moving reachable objects
                                together to create contiguous free space.

     Important Methods Related to Garbage Collection
          1. System.gc(): The System.gc() method is a request to the JVM to perform garbage collection. However, it depends upon the JVM whether to perform it or not.
          2. finalize():  This is a protected method of the Object class that can be overridden by a class to perform cleanup operations before an object is 
                          garbage collected. The finalize() method is called by the garbage collector when it determines that there are no more references to the object.

              example:
              @Override
               protected void finalize() throws Throwable {
                       try {
                              // Cleanup code, e.g., closing resources
                              System.out.println("Object is being garbage collected");
                       } finally {
                            super.finalize(); 
      
15) How is garbage collection controlled?
    Garbage collection is managed by JVM. We can externally call the System.gc() or Runtime.getRuntime().gc() for the garbage collection. 
 
16) How can an object be unreferenced?
        1) By nulling a reference. 
        2) By assigning a reference to another. 
              Employee e=new Employee(); 
              Employee e1=new Employee();
              Employee e2=new Employee(); 
              e=null;       // by nulling a reference
              e1=e2;        //By assigning a reference to another. now the first object referred by e1 is available for garbage collection
        3) By anonymous object.
              new Employee();


17)  What are the FileInputStream and FileOutputStream?
      FileInputStream : It is a class used to read raw byte streams from a file. It is used for reading binary data, such as images, audio files, or any other type 
                        of file that is not text-based.
      Key Features:
            Byte-Oriented: It reads data in the form of bytes, making it suitable for binary files.
            Input Stream: It extends the InputStream class, which provides methods for reading bytes.
      Common Methods:
            int read(): Reads the next byte of data from the input stream. Returns -1 if the end of the file is reached.
            int read(byte[] b): Reads a certain number of bytes from the input stream into an array.
            void close(): Closes the input stream and releases any system resources associated with it.
           
example 
import java.io.FileInputStream;
import java.io.IOException;

FileInputStream fis = null;
        try {
            fis = new FileInputStream("example.txt"); 
            int data;
            while ((data = fis.read()) != -1) {                  // -1 means Read until the end of the file
                System.out.print((char) data);                  // Print the byte as a character
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();                             // Closes the input stream and releases any system resources associated with it.
                }
            } catch (IOException e) {
                e.printStackTrace();
     ------ -----------------------------------------------------------------------------------------      
FileOutputStream : It is a class used to write raw byte streams to a file. It is used for writing binary data, such as images, audio files, or any other type 
                   of file that is not text-based.
Key Features:
    Byte-Oriented: It writes data in the form of bytes, making it suitable for binary files.
    Output Stream: It extends the OutputStream class, which provides methods for writing bytes.
Common Methods:
    void write(int b): Writes the specified byte to the output stream.
    void write(byte[] b): Writes an array of bytes to the output stream.
    void close(): Closes the output stream and releases any system resources associated with it.

example
import java.io.FileOutputStream;
import java.io.IOException;

     FileOutputStream fos = null;
        try {
            fos = new FileOutputStream("output.txt"); 
            String data = "Hello, World!";
            fos.write(data.getBytes());            // Write the string as bytes to the file
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fos != null) {
                    fos.close(); // Close the stream
                }
            } catch (IOException e) {
                e.printStackTrace();
            }


18) What is the purpose of using BufferedInputStream and BufferedOutputStream classes?
        BufferedInputStream is a subclass of FilterInputStream which adds more efficiency to another input stream by buffering the input. The main purposes of using 
        BufferedInputStream are:
         1. Performance Improvement:  Reading data one byte at a time from a file or network can be inefficient due to frequent I/O operations. BufferedInputStream 
                            reads a larger block of data into a buffer (an array of bytes) at once, reducing the number of I/O operations and improving performance.
         2. The mark() and reset() methods, allowing you to mark a position in the stream and return to it later. This is useful when you need to read data multiple
                            times without re-reading from the underlying stream.

          example
          import java.io.BufferedInputStream;
          import java.io.FileInputStream;
          import java.io.IOException;
            
                 try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream("example.txt"))) {
                          int data;
                          while ((data = bis.read()) != -1) {
                                 System.out.print((char) data); // Print the byte as a character
                          }
                  } catch (IOException e) {
                       e.printStackTrace();

-----------------------------------------------------------------------------------------------------------------
       BufferedOutputStream 
        1. Performance Improvement: Writing data one byte at a time can be inefficient due to frequent I/O operations. BufferedOutputStream writes data to a buffer
                                    first and only flushes the buffer to the underlying output stream when it is full or when explicitly requested. 
                                    This reduces the number of I/O operations and improves performance.
        2. Automatic Flushing: It can be configured to automatically flush the buffer when a certain condition is met (e.g., when a newline character is written).
                                    This ensures that data is written to the underlying stream promptly.
        
        Example
        import java.io.BufferedOutputStream;
        import java.io.FileOutputStream;
        import java.io.IOException;

                try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("output.txt"))) {
                         String data = "Hello, World!";
                         bos.write(data.getBytes()); // Write the string as bytes to the buffer
                         bos.flush(); // Flush the buffer to the file
                } catch (IOException e) {
                       e.printStackTrace();

        
19) What is FileReader and FileWriter
    FileReader is a class used to read character files. It makes it easy to read text data from a file by converting bytes into characters using the default 
    character encoding.
    Key Features:
        Character-Oriented: It reads data as characters, making it suitable for text files.
        Extends InputStreamReader: FileReader is a subclass of InputStreamReader, which means it can read bytes and decode them into characters.
    Common Methods:
         int read(): Reads a single character from the file and returns it as an integer. Returns -1 if the end of the file is reached.
         int read(char[] cbuf): Reads characters into a specified character array.
         void close(): Closes the file reader and releases any system resources associated with it

example
import java.io.FileReader;
import java.io.IOException;

public class FileReaderExample {
    public static void main(String[] args) {
        try (FileReader fr = new FileReader("example.txt")) {
            int data;
            while ((data = fr.read()) != -1) {        // -1 means Read until the end of the file
                System.out.print((char) data);       // Print the character
            }
        } catch (IOException e) {
            e.printStackTrace();

-------------------------------------------------------------------
FileWriter is a class used to write character files. It allows you to write text data to a file by converting characters into bytes using the default character encoding.
Key Features:
    Character-Oriented: It writes data as characters, making it suitable for text files.
    Extends OutputStreamWriter: FileWriter is a subclass of OutputStreamWriter, which means it can write characters and encode them into bytes.
Common Methods:
   void write(int c): Writes a single character to the file.
   void write(char[] cbuf): Writes an array of characters to the file.
   void write(String str): Writes a string to the file.
   void close(): Closes the file writer and releases any system resources associated with it.

example:
import java.io.FileWriter;
import java.io.IOException;

public class FileWriterExample {
    public static void main(String[] args) {
        try (FileWriter fw = new FileWriter("output.txt")) {
            String data = "Hello, World!";
            fw.write(data); // Write the string to the file
        } catch (IOException e) {
            e.printStackTrace();


20)  In Java, How many ways you can take input from the console?
 1. Using BufferedReader class: It provides an efficient reading as the input gets buffered. 
 example. 
          System.out.println("Enter the name of the person"); 
         BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); 
         String name = reader.readLine(); 
         System.out.println(name); 

2. Using Scanner class: The Java Scanner class breaks the input into tokens using a delimiter that is whitespace by default. Java Scanner class extends Object class
                        and implements Iterator and Closeable interfaces. 
   example. 
           String str = "Hello/"; 
           Scanner scanner = new Scanner(str); 
           System.out.println("Boolean Result: "+scanner.hasNextBoolean()); 
           scanner.useDelimiter("/");   //Change the delimiter of this scanner
           while(scanner.hasNext() { 
              System.out.println(scanner.next()); } 
              scanner.close(); 

3. Using Console class: The Java Console class is used to get input from the console. It provides methods to read texts and passwords. If you read the password
                        using the Console class, it will not be displayed to the user. The java.io.Console class is attached to the system console internally. 
      example. 
           Console c=System.console(); 
           System.out.println("Enter your name: "); 
           String n=c.readLine(); 
           System.out.println("Welcome "+n);

21)  What is serialization?
     Serialization in Java is a mechanism of writing the state of an object into a byte stream. It is used primarily in Hibernate, RMI, JPA, EJB and JMS technologies.
     It is mainly used to travel object's state on the network (which is known as marshaling). Serializable interface is used to perform serialization. It is helpful
     when you require to save the state of a program to storage such as the file. At a later point of time, the content of this file can be restored using deserialization.
     It is also required to implement RMI(Remote Method Invocation). With the help of RMI, it is possible to invoke the method of a Java object on one machine to another
     machine.

22) How can you make a class serializable in Java?
 A class can become serializable by implementing the Serializable interface.

23) Can a Serialized object be transferred via network?
 Yes, we can transfer a serialized object via network because the serialized object is stored in the memory in the form of bytes and can be transmitted over the network.
 We can also write the serialized object to the disk or the database 

24) What is Deserialization?
 Deserialization is the process of reconstructing the object from the serialized state. It is the reverse operation of serialization. An ObjectInputStream deserializes 
 objects and primitive data written using an ObjectOutputStream. 

example
    class Depersist{ 
    public static void main(String args[]) throws Exception{ 
          ObjectInputStream in=new ObjectInputStream(new FileInputStream("f.txt")); 
          Student s=(Student)in.readObject(); 
          System.out.println(s.id+" "+s.name);
          in.close(); 

25) What is the transient keyword?
 If you define any data member as transient, it will not be serialized. By determining transient keyword, the value of variable need not persist when it is restored.

26) What are wrapper classes?
    Wrapper classes are classes that allow primitive types to be accessed as objects. In other words, we can say that wrapper classes are built-in java classes which
    allow the conversion of objects to primitives and primitives to objects. The process of converting primitives to objects is called autoboxing, and the process of
    converting objects to primitives is called unboxing.

27) What are autoboxing and unboxing? When does it occur?
     The autoboxing is the process of converting primitive data type to the corresponding wrapper class object, eg., int to Integer. The unboxing is the process of
     converting wrapper class object to primitive data type. For eg., integer to int. Unboxing and autoboxing occur automatically in Java. However, we can externally
     convert one into another by using the methods like valueOf() or xxxValue(). It can occur whenever a wrapper class object is expected, and primitive data type
    is provided or vice versa. Adding primitive types into Collection like ArrayList in Java. 
    Creating an instance of parameterized classes ,e.g., ThreadLocal which expect Type. Java automatically converts primitive to object whenever one is required and
    another is provided in the method calling. When a primitive type is assigned to an object type.

28)  What is the purpose of the strictfp keyword?
    Java strictfp keyword ensures that you will get the same result on every platform if you perform operations in the floating-point variable. The precision may differ
    from platform to platform that is why java programming language has provided the strictfp keyword so that you get the same result on every platform. So, now you have
    better control over the floating-point arithmetic.  


29) How to make a read-only class in Java?
    A class can be made read-only by making all of the fields private. The read-only class will have only getter methods which return the private property of the class
    to the main method. We cannot modify this property because there is no setter method available in the class. 

example. 
public class Student{ 
private String college="AKG"; 
public String getCollege(){
return college;

30) How to make a write-only class in Java?
    A class can be made write-only by making all of the fields private. The write-only class will have only setter methods which set the value passed from the main method
    to the private fields. We cannot read the properties of the class because there is no getter method in this class.
 
example. 
public class Student{ 
private String college;
public void setCollege(String college){ 
this.college=college; 


31) What is the package?
    A package is a group of similar type of classes, interfaces, and sub-packages. It provides access protection and removes naming collision. The packages in Java can
    be categorized into two forms, inbuilt package, and user-defined package. There are many built-in packages such as Java, lang, awt, javax, swing, net, io, util, sql.

32) Can I import same package/class twice?
    One can import the same package or the same class multiple times. However, the JVM will internally load the class only once no matter how many times you import the
    same class. 

33) What is the static import?
    Static import  allows public static members (fields and methods) of another class, to be used in Java code without specifying the class in which the field has 
    been defined. 

Example
 import static java.lang.Math.*;
 import static java.lang.System.out;
 public class HelloWorld {
 public static void main(String[] args) {
 out.println("Hello World!");
 out.println("Considering a circle with a diameter of 5 cm, it has");
 out.println("a circumference of " + (PI * 5) + " cm");
 out.println("and an area of " + (PI * pow(2.5, 2)) + " sq. cm");
 you dont have to write Math.PI or Math.pow etc. 

34)  How can we create an immutable class in Java?
     We can create an immutable class by defining a final class having all of its members as final. 
example. 
public final class Employee{ 
final String pancardNumber; 
public Employee(String pancardNumber){
 this.pancardNumber=pancardNumber; } 
public String getPancardNumber(){
 return pancardNumber; 

35) What is the purpose of toString() method in Java?
    The toString() method returns the string representation of an object. If you print any object, java compiler internally invokes the toString() method on the object.
    By overriding the toString() method of the Object class, we can return the values of the object as desired. 
example. 
class Student{
 int rollno; 
String name; 
String city; 
Student(int rollno, String name, String city){ 
this.rollno=rollno; this.name=name; this.city=city; } 
public String toString(){
 //overriding the toString() method return rollno+" "+name+" "+city; }
 public static void main(String args[]){
 Student s1=new Student(101,"Raj","lucknow"); 
Student s2=new Student(102,"Vijay","ghaziabad"); 
System.out.println(s1);//compiler writes here s1.toString() 
System.out.println(s2);//compiler writes here s2.toString() 
} } 
Output: 101 Raj lucknow 
 102 Vijay ghaziabad 


36) How do I convert a numeric IP address like 192.18.97.39 into a hostname like java.sun.com?
 By InetAddress.getByName("192.18.97.39").getHostName() where 192.18.97.39 is the IP 
address. 
example. 
import java.io.*; 
import java.net.*; 
public class InetDemo{ 
public static void main(String[] args){ 
try{ InetAddress ip=InetAddress.getByName("195.201.10.8"); 
System.out.println("Host Name: "+ip.getHostName());
 }catch(Exception e){
 System.out.println(e)

37) Write a Java program that prints all the values given at command-line.
 Program class A{ 
public static void main(String args[]){
 for(int i=0;i < args.length; i++){
 System.out.println(args[i]); 
