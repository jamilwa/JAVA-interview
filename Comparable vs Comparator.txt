
	1. Whenever we have to sort objects in customized way or compare objects then we have to use two things. Comparable interface and Comparator( both are 			functional interface)

	2. Comparator interface is used to order the objects of a user-defined class. This interface contains 2 methods compare(Object obj1, Object obj2) and 			equals(Object element).  
	   How do the sort() method of Collections class work? 
		Internally the Sort method does call Compare method of the classes it is sorting. To compare two elements, it asks “Which is greater?”
		Compare method returns -1, 0, or 1 to say if it is less than, equal, or greater to the other. It uses this result to then determine if they should be 		      swapped for their sort.
		
		Example:
		class Student {
 			int rollno;
    			String name, address;
 			
    			public Student(int rollno, String name, String address)
    			{
 			
    			    this.rollno = rollno;
    			    this.name = name;
    			    this.address = address;
    			}
 			
    			public String toString()
    			{
 				return this.rollno + " " + this.name + " "+ this.address;
    			}
			
 
		// Class 2
		// Helper class implementing Comparator interface
		class Sortbyroll implements Comparator<Student> {
		 
		    // Sorting in ascending order of roll number
		    public int compare(Student a, Student b)
		    {
		 
		        return a.rollno - b.rollno;
		    }
		}
		 
		// Class 3
		class Sortbyname implements Comparator<Student> {
		 
		    // Sorting in ascending order of name
		    public int compare(Student a, Student b)
		    {
		 
		        return a.name.compareTo(b.name);
		    }
		
 
		// Class 4
		// Main class
		class GFG {
		 
		    public static void main(String[] args)
		    {
		 
		        ArrayList<Student> ar = new ArrayList<Student>();
		 
		        ar.add(new Student(111, "Mayank", "london"));
		        ar.add(new Student(131, "Anshul", "nyc"));
		        ar.add(new Student(121, "Solanki", "jaipur"));
		        ar.add(new Student(101, "Aggarwal", "Hongkong"));
		 
		        // Sorting student entries by roll number
		        Collections.sort(ar, new Sortbyroll());
		 
		        // Sorting student entries by name
		        Collections.sort(ar, new Sortbyname());
		 
		        




	3. Comparable Example 

		public class Player implements Comparable<Player> {
		  private int ranking;
  		  private String name;
  		  private int age;
    
 		   // constructor, getters, setters  
		}
    			

    		@Override
    		public int compareTo(Player otherPlayer) {
        	return Integer.compare(getRanking(),otherPlayer.getRanking());
    			}



		public static void main(String[] args) {
    			List<Player> footballTeam = new ArrayList<>();
    			Player player1 = new Player(59, "John", 20);
    			Player player2 = new Player(67, "Roger", 22);
    			Player player3 = new Player(45, "Steven", 24);
    			footballTeam.add(player1);
    			footballTeam.add(player2);
    			footballTeam.add(player3);

    			System.out.println("Before Sorting : " + footballTeam);
    			Collections.sort(footballTeam);
    			System.out.println("After Sorting : " + footballTeam);
		}


		
		Output:
		Before Sorting : [John, Roger, Steven]
		After Sorting : [Steven, John, Roger]



	4. Comparator Example
		
		public class PlayerRankingComparator implements Comparator<Player> {
		  private int ranking;
  		  private String name;
  		  private int age;
    
 		   // constructor, getters, setters  
		}


    		@Override
    		public int compare(Player firstPlayer, Player secondPlayer) {
       		return Integer.compare(firstPlayer.getRanking(), secondPlayer.getRanking());
    		}

		

		public static void main(String[] args) {
    			List<Player> footballTeam = new ArrayList<>();
    			Player player1 = new Player(59, "John", 20);
    			Player player2 = new Player(67, "Roger", 22);
    			Player player3 = new Player(45, "Steven", 24);
    			footballTeam.add(player1);
    			footballTeam.add(player2);
    			footballTeam.add(player3);

			Comparator byRanking = (Player player1, Player player2) -> Integer.compare(player1.getRanking(), player2.getRanking());
			Collections.sort(footballTeam, byRanking);


    			System.out.println("Before Sorting : " + footballTeam);
    			Collections.sort(footballTeam);
    			System.out.println("After Sorting : " + footballTeam);
		}

		
		




	// Comparable has comparTo(T o)	.  this is used when we have class in same project, so that we can use this operator
	// Comparator has compare(T o1, T o2)	this is used when we dont have class in the project, we r getting it externally from jar
