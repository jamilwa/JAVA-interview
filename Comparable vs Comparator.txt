0.  
      		Comparable	                                                                                    Comparator
Comparable provides compareTo() method to sort elements in Java.	                Comparator provides compare() method to sort elements in Java.
Comparable interface is present in java.lang package.	                                Comparator interface is present in java. util package.
This method can sort the data according to the natural sorting order.           	This method sorts the data according to the customized sorting order.
It affects the original class. i.e., the actual class is altered.                 	It doesn’t affect the original class, i.e., the actual class is not altered.
found in java.lang package                            					found in java.util package


1. Whenever we have to sort objects in customized way or compare objects then we have to use two things. Comparable interface and Comparator( both are functional 		interface(has only one abstract method)

3. Comparator interface is used to order the objects of a user-defined class. This interface contains 2 methods 
	compare(Object obj1, Object obj2) and equals(Object element).  

4. How do the sort() method of Collections class work? 
	Internally the Sort method does call Compare method of the classes it is sorting. To compare two elements, it asks “Which is greater?”
	Compare method returns -1, 0, or 1 to say if it is less than, equal, or greater to the other. It uses this result to then determine if
	they should be swapped for their sort. 
		
Example:
import java.util.*;
import java.lang.*;
import java.io.*;

class Employee {
    String name;
    int age;

    Employee(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
            this.age = age;
    }


    @Override
    public String toString() {
        return name + " (" + age + ")";
    }
}

class AgeComparator implements Comparator<Employee> {
    @Override
    public int compare(Employee e1, Employee e2) {
        return Integer.compare(e1.age, e2.age); // Compare by age
    }
}

class NameComparator implements Comparator<Employee> {
    @Override
    public int compare(Employee e1, Employee e2) {
        // Compare by name in lexicographical order
        return e1.name.compareTo(e2.name);
    }
}

public class Main {
    public static void main(String[] args) {
        List<Employee> employees = Arrays.asList(
            new Employee("Alice", 30),
            new Employee("Charlie", 35),
            new Employee("Bob", 25),
            new Employee("Bob", 20)
         
        );

        Collections.sort(employees, new NameComparator());     				// is used if there are no setters and getters, but only constructor is there.
		System.out.println(employees); 						// output [Alice (30), Bob (25), Bob (20), Charlie (35)]

        Collections.sort(employees, Comparator.comparing(Employee::getName)); 
		System.out.println(employees); 						// output [Alice (30), Bob (25), Bob (20), Charlie (35)]

        Collections.sort(employees, Comparator.comparing(Employee::getName).thenComparing(Employee::getAge));        
		System.out.println(employees); 						// output [Alice (30), Bob (20), Bob (25), Charlie (35)]

        Collections.sort(employees, Comparator.comparing(Employee::getName, Comparator.reverseOrder())
      .thenComparing(Employee::getAge, Comparator.reverseOrder())); 
		System.out.println(employees); 						// output [Charlie (35), Bob (25), Bob (20), Alice (30)]


    }
}

        


	3. if Comparator is not to be used for sorting by name & then by age, then we can make use of below code to do sorting
	
	class EmployeeComparator implements Comparator<Employee> {
	 
	    @Override
	    public int compare(Employee e1, Employee e2)
	    {
		// 1st level comparison
	        int NameCompare = e1.getName().compareTo(e2.getName());
	        int AgeCompare = e1.getAge().compareTo(e2.getAge());
	 
	        // 2nd level comparison
	        return (NameCompare == 0) ? AgeCompare : NameCompare;



	and in main class use below
		Collections.sort(employees, new EmployeeComparator());


		        
	4. if Comparator is not to be used for sorting by name & then by age in descending order then we can do it By changing the return value inside the 
		compare method.
		for example: For descending order just change the 
		positions of ‘e1’ and ‘e2’ in the number 3 code compare method.
	
	
	5. The Comparable interface is used to compare an object of the same class with an instance of that class.  it provides the compareTo method that takes a 
		parameter of the object of that class. 
	
	    Comparable Example 

		public class Student implements Comparable<Student> {
  		  private String name;
  		  private int age;
    
 		   // constructor, getters, setters  
		}
    			

    		@Override
    		public int compareTo(Student otherStudent) {
        	return Integer.compare(getRanking(),otherStudent.getRanking());
    			}



		public static void main(String[] args) {
    			List<Student> studentTeam = new ArrayList<>();
    			
			studentTeam.add(new Player("John", 20));
    			studentTeam.add(new Player("Roger", 22));
    			studentTeam.add(new Player("Steven", 24));
			
			Collections.sort(studentTeam);
    	

		
		Output:
		Before Sorting : [John, Roger, Steven]
		After Sorting : [Steven, John, Roger]



	// Comparable has comparTo(T o)	.  this is used when we have class in same project, so that we can use this operator
	// Comparator has compare(T o1, T o2)	this is used when we dont have class in the project, we r getting it externally from jar
