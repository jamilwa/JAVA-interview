A. Different bean scopes
 1. Singleton : The default scope in Spring Boot, where the Spring container creates and manages a single instance of a bean per Spring IoC container. 
                This is memory efficient because the bean is reused across the application. 
 2. Prototype : The framework manages the type of bean, but creates a new instance of that class each time it's requested.
 3. Request : creates a bean instance for a single HTTP request.
 4. Session : creates a bean instance for an HTTP Session.
 5. Application : creates the bean instance for a ServletContext.
 6. websocket : creates it for a particular WebSocket session.

B. The three main types of dependency injection in Spring Boot are:
Dependency Injection (DI) it allows us to achieve the principle of Inversion Of Control (IoC) i.e. shifting the creation, management and the lifecycle of objects from
        the programmer to the framework. This approach helps relieve the programmer from the responsibility of managing and creating objects and allows them to 
        focus mainly on the business logic.

1. Constructor injection : The injector supplies the dependency through the client class constructor. This is the most recommended technique in the Spring Framework. 
 @RestController
@RequestMapping("/api")
public class RESTController {
    private final SmartPhone mySmartPhone;

    //* Constructor Injection  *//
    @Autowired
    public RESTController(SmartPhone theSmartPhone)
    {
        this.mySmartPhone = theSmartPhone;
    }

    @GetMapping("/smartphone/name")
    public String getSmartPhoneName()
    {
        return mySmartPhone.getName();
}
}

2. Setter injection : The injector method injects the dependency to the setter method exposed by the client. This technique provides flexibility for changes at runtime. 




3. Field injection: The injector directly injects dependencies into class fields. This is a concise but potentially less flexible approach



### **Core Spring Boot Concepts**
1. **Q: What is Spring Boot, and how is it different from the Spring Framework?**  
   **A:**  
   - Spring Boot simplifies Spring development by providing auto-configuration, embedded servers, and opinionated defaults to reduce boilerplate code.  
   - Key differences:  
     - Spring requires explicit configuration; Spring Boot uses auto-configuration.  
     - Spring does not include an embedded server; Spring Boot supports embedded Tomcat, Jetty, and Undertow.  

2. **Q: What is the role of the `@SpringBootApplication` annotation?**  
   **A:**  
   - It's a combination of:  
     1. `@Configuration`: Marks the class as a source of bean definitions.  
     2. `@EnableAutoConfiguration`: Enables Spring Boot's auto-configuration.  
     3. `@ComponentScan`: Enables component scanning for Spring components.  

---

### **Spring Boot Features**
3. **Q: What are the advantages of using Spring Boot?**  
   **A:**  
   - Simplified dependency management with `starter` dependencies.  
   - Embedded server for easy testing and deployment.  
   - Production-ready features like metrics, health checks, and externalized configuration.  
   - Reduced boilerplate with annotations and auto-configuration.  

4. **Q: Explain the concept of auto-configuration in Spring Boot. How does it work?**  
   **A:**  
   - Auto-configuration uses `@EnableAutoConfiguration` and conditions defined in `META-INF/spring.factories` files to automatically configure Spring beans.  
   - Example: If `spring-boot-starter-web` is included, Spring Boot configures a DispatcherServlet, Jackson for JSON, and more.  

---

### **Dependency Management**
5. **Q: How does Spring Boot manage dependencies?**  
   **A:**  
   - It uses a parent POM (`spring-boot-starter-parent`) that defines dependency versions to ensure compatibility.  
   - You can override versions by specifying them in your `pom.xml` or `build.gradle`.  

6. **Q: What are Spring Boot starters? Name a few commonly used starters.**  
   **A:**  
   - Starters are pre-defined dependency packages that simplify dependency management.  
   - Examples:  
     - `spring-boot-starter-web`: For building web applications.  
     - `spring-boot-starter-data-jpa`: For JPA-based data access.  
     - `spring-boot-starter-security`: For security configurations.  

---

### **Microservices & Rest APIs**
7. **Q: How do you create a RESTful API in Spring Boot?**  
   **A:**  
   - Use `@RestController` and `@RequestMapping` to define endpoints.  
   - Example:  
     ```java
     @RestController
     @RequestMapping("/api")
     public class MyController {
         @GetMapping("/hello")
         public String sayHello() {
             return "Hello, World!";
         }
     }
     ```  

8. **Q: How do you handle exceptions in a Spring Boot application?**  
   **A:**  
   - Use `@ControllerAdvice` with `@ExceptionHandler` to centralize exception handling.  
   - Example:  
     ```java
     @ControllerAdvice
     public class GlobalExceptionHandler {
         @ExceptionHandler(ResourceNotFoundException.class)
         public ResponseEntity<String> handleNotFoundException(ResourceNotFoundException ex) {
             return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
         }
     }
     ```  

---

### **Configuration and Properties**
9. **Q: How do you externalize configurations in Spring Boot?**  
   **A:**  
   - Use `application.properties` or `application.yml`.  
   - Example:  
     ```properties
     server.port=8081
     spring.datasource.url=jdbc:mysql://localhost:3306/db
     ```  

10. **Q: How do you secure sensitive configuration data?**  
    **A:**  
    - Use environment variables.  
    - Leverage external configuration tools like Spring Cloud Config or HashiCorp Vault.  
    - Use Jasypt for encrypting properties.  

---

### **Database and Persistence**
11. **Q: What is Spring Data JPA, and how does it simplify database access?**  
    **A:**  
    - Spring Data JPA provides a repository abstraction over JPA.  
    - Example: The `JpaRepository` interface provides pre-defined methods for CRUD operations, so you don't have to write SQL.  

12. **Q: How do you handle transactions in Spring Boot?**  
    **A:**  
    - Use `@Transactional` to demarcate transactional boundaries.  
    - Example:  
      ```java
      @Service
      public class MyService {
          @Transactional
          public void performTransaction() {
              // Code here will execute within a transaction
          }
      }
      ```  

---

### **Performance and Optimization**
13. **Q: How do you optimize a Spring Boot application for performance?**  
    **A:**  
    - Use caching with `@EnableCaching` and cache providers like EhCache or Redis.  
    - Enable lazy loading in JPA.  
    - Use profiling tools like Spring Boot Actuator or Micrometer to identify bottlenecks.  

14. **Q: How do you handle database connection pooling in Spring Boot?**  
    **A:**  
    - Spring Boot uses HikariCP as the default connection pool.  
    - Customize the pool in `application.properties`:  
      ```properties
      spring.datasource.hikari.maximum-pool-size=10
      spring.datasource.hikari.minimum-idle=2
      ```  

---

### **Spring Boot Actuator**
15. **Q: What is Spring Boot Actuator, and why is it used?**  
    **A:**  
    - Actuator provides production-ready features like health checks, metrics, and application monitoring.  
    - Common endpoints:  
      - `/actuator/health`: Application health.  
      - `/actuator/metrics`: Application metrics.  

---

### **Spring Boot with Cloud**
16. **Q: How do you implement service discovery in a Spring Boot microservice?**  
    **A:**  
    - Use Spring Cloud Netflix Eureka. Annotate the application with `@EnableEurekaClient` and configure the Eureka server URL in `application.properties`.  

17. **Q: What is Spring Cloud Config, and how is it used?**  
    **A:**  
    - It externalizes configuration management across multiple services.  
    - Configure a Spring Cloud Config server to serve configurations stored in Git or another repository.  

---

### **Advanced Topics**
18. **Q: How do you secure a Spring Boot application?**  
    **A:**  
    - Use Spring Security with `@EnableWebSecurity`.  
    - Define roles and permissions.  
    - Example:  
      ```java
      @Configuration
      @EnableWebSecurity
      public class SecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http.csrf().disable()
                  .authorizeRequests()
                  .antMatchers("/public").permitAll()
                  .anyRequest().authenticated()
                  .and()
                  .formLogin();
          }
      }
      ```  

19. **Q: What is a custom health indicator in Spring Boot Actuator?**  
    **A:**  
    - Implement a custom health check by extending `AbstractHealthIndicator`.  
    - Example:  
      ```java
      @Component
      public class CustomHealthIndicator extends AbstractHealthIndicator {
          @Override
          protected void doHealthCheck(Health.Builder builder) throws Exception {
              builder.up().withDetail("customCheck", "All systems operational");
          }
      }
      ```  

20. **Q: How do you integrate Spring Boot with Kafka or RabbitMQ?**  
    **A:**  
    - Use Spring Kafka or Spring AMQP (for RabbitMQ).  
    - Define consumers and producers using configuration beans or annotations like `@KafkaListener` and `@RabbitListener`.  

---

21. Lazy loading in Spring Boot is a technique that delays the creation of beans until they are requested. This saves system resources and improves performance. 
How it works
When the Spring container starts up, it doesn't create all beans immediately 
Instead, it waits until the bean is needed in the application context 
This approach is more efficient because it loads only the main entity at first, fetching related entities only when needed 
Benefits
Startup time: Lazy loading can significantly improve application startup time 
Memory consumption: Lazy loading can improve memory consumption, especially when there are a large number of beans 
Resource consumption: Lazy loading can reduce resource consumption, which can lead to lower operational costs 
How to configure lazy loading 
You can use the @Lazy annotation to configure lazy loading for a class

22. What is lazy loading in JPA?
   By default, JPA uses lazy loading for relationships when you specify . So, when you query a object, it loads the person's data but doesn't immediately load 
   the associated address. Only when you access the attribute of a object, like , JPA triggers a database query to load the associated address.

23. What is fail-fast and fail-safe in Spring Boot?
    Fail-safe iterators means they will not throw any exception even if the collection is modified while iterating over it. Whereas Fail-fast iterators throw
    an exception( ConcurrentModificationException ) if the collection is modified while iterating over it.
