A. Different bean scopes
 1. Singleton : The default scope in Spring Boot, where the Spring container creates and manages a single instance of a bean per Spring IoC container. 
                This is memory efficient because the bean is reused across the application. 
 2. Prototype : The framework manages the type of bean, but creates a new instance of that class each time it's requested.
 3. Request : creates a bean instance for a single HTTP request.
 4. Session : creates a bean instance for an HTTP Session.
 5. Application : creates the bean instance for a ServletContext.
 6. websocket : creates it for a particular WebSocket session.

B. The three main types of dependency injection in Spring Boot are:
Dependency Injection (DI) it allows us to achieve the principle of Inversion Of Control (IoC) i.e. shifting the creation, management and the lifecycle of objects from
        the programmer to the framework. This approach helps relieve the programmer from the responsibility of managing and creating objects and allows them to 
        focus mainly on the business logic.

1. Constructor injection : The injector supplies the dependency through the client class constructor. This is the most recommended technique in the Spring Framework. 

public class RESTController {
    private final SmartPhone mySmartPhone;

    //* Constructor Injection  *//
    @Autowired
    public RESTController(SmartPhone theSmartPhone)
    {
        this.mySmartPhone = theSmartPhone;
    }

    @GetMapping("/smartphone/name")
    public String getSmartPhoneName()
    {
        return mySmartPhone.getName();
}
}

2. Setter injection : The injector method injects the dependency to the setter method exposed by the client. This technique provides flexibility for changes at runtime. 

public class RESTController {
    private SmartPhone mySmartPhone;

    //* Setter Injection *//
    @Autowired
    public void setSmartPhone(SmartPhone theSmartPhone) {
        this.mySmartPhone = theSmartPhone;
    }

    @GetMapping("/smartphone/name")
    public String getSmartPhoneName() {
        return mySmartPhone.getSmartPhoneName();
    }
}



3. Field injection: The injector directly injects dependencies into class fields. This is a concise but potentially less flexible approach


C. What is Spring Boot, and how is it different from the Spring Framework?**  
   - Spring Boot simplifies Spring development by embedded server like Tomcat, Jetty, and Undertow.
   - Simplified dependency management with `starter` dependencies. 
   - Actuator gives Production-ready features like metrics, health checks and application monitoring.  Common endpoints:  /actuator/health   and   /actuator/metrics  
   - Reduced boilerplate with annotations and auto-configuration. 
   - features like profiles and externalized configuration
   - Spring Boot provides default loggings. 


D. What is the role of the `@SpringBootApplication` annotation?**  
   - It's a combination of:  
     1. `@Configuration`: Marks the class as a source of bean definitions.  
     2. `@EnableAutoConfiguration`: Enables Spring Boot's auto-configuration.  
     3. `@ComponentScan`: Enables component scanning for Spring components.  

E. Explain the concept of auto-configuration in Spring Boot. How does it work? 
    Auto-configuration uses `@EnableAutoConfiguration` and conditions defined in `META-INF/spring.factories` files to automatically configure Spring beans.  
    Spring Boot Auto Configuration would automatically provide configuration based on the dependencies. 
   - Example: If `spring-boot-starter-web` is included, Spring Boot configures a DispatcherServlet, tomcat, Jackson for JSON, and more.  


F. How does Spring Boot manage dependencies? 
   - It uses a parent POM (`spring-boot-starter-parent`) that defines dependency versions to ensure compatibility.  
   - You can override versions by specifying them in your `pom.xml` or `build.gradle`.  

G. What are Spring Boot starters? Name a few commonly used starters. 
    Starters are pre-defined dependency packages that help you to quickly define dependencies for your projects and simplify dependency management.
   - Examples:  JPA, Actuator,  Web, Security, DevTools.
     - `spring-boot-starter-web`: For building web applications.  
     - `spring-boot-starter-data-jpa`: For JPA-based data access.  Spring Data JPA provides a repository abstraction over JPA.  
                                       The `JpaRepository` interface provides pre-defined methods for CRUD operations, so you don't have to write SQL.
     - `spring-boot-starter-security`: For security configurations. 
     - 'spring-boot-starter-devTools : to make application changes without restarting the server manually.


H.  How do you secure sensitive configuration data?**  
    - Use environment variables.  
    - Leverage external configuration tools like Spring Cloud Config or HashiCorp Vault.  
    - Use Jasypt for encrypting properties.  

I.  
J. How do you handle transactions in Spring Boot?

    - Use `@Transactional` to demarcate transactional boundaries.  
    - Example:  
      ```java
      @Service
      public class MyService {
          @Transactional
          public void performTransaction() {
              // Code here will execute within a transaction
          }
      }
 
K. How do you optimize a Spring Boot application for performance? 
      performance J E A.     J for JPA, E For Enables caching, A for Actuator 
      - Enable lazy loading in JPA.  
      - Use `@EnableCaching` with cache providers like EhCache or Redis.  
      - Use profiling tools like Spring Boot Actuator or Micrometer to identify bottlenecks.  

L. How do you handle database connection pooling in Spring Boot? 
   a database connection pool(HikariCP) is a mechanism that manages a pool of database connections, allowing applications to reuse existing connections rather than
   creating a new one for every database operation. This improves performance and resource management, especially in applications that require frequent database access.

   Key Concepts of Database Connection Pools
    1. Connection Pooling: Instead of opening and closing a database connection for each request, a connection pool maintains a set of active connections. 
       When an application needs a connection, it can borrow one from the pool, and when it's done, it returns it to the pool for reuse.

    2. Performance: Connection pooling reduces the overhead of establishing a new connection each time a database operation is performed. This is particularly beneficial
       in high-load scenarios where many requests are made to the database.

    3. Resource Management: By limiting the number of active connections, connection pools help manage database resources effectively, preventing issues like 
       connection exhaustion.

       Spring Boot uses HikariCP as the default connection pool. Customize the pool in application.properties:  
       spring.datasource.hikari.maximum-pool-size=10
       spring.datasource.hikari.minimum-idle=2

M. 
N. How do you secure a Spring Boot application?**  
    - Use Spring Security with `@EnableWebSecurity`.  
    - Define roles and permissions.  
    - Example:  
      Demo.java
      @Configuration
      @EnableWebSecurity
      public class SecurityConfig extends WebSecurityConfigurerAdapter {
          @Override
          protected void configure(HttpSecurity http) throws Exception {
              http.csrf().disable()
                  .authorizeRequests()
                  .antMatchers("/public").permitAll()
                  .anyRequest().authenticated()
                  .and()
                  .formLogin();
          }
      }
        

O. What is a custom health indicator in Spring Boot Actuator?**  
    - Implement a custom health check by extending `AbstractHealthIndicator`.  
    - Example:  
      java
      @Component
      public class CustomHealthIndicator extends AbstractHealthIndicator {
          @Override
          protected void doHealthCheck(Health.Builder builder) throws Exception {
              builder.up().withDetail("customCheck", "All systems operational");
          }
      }
       

P. How do you integrate Spring Boot with Kafka or RabbitMQ?**  
    - Use Spring Kafka or Spring AMQP (for RabbitMQ).  
    - Define consumers and producers using configuration beans or annotations like `@KafkaListener` and `@RabbitListener`.  


21. Lazy loading in Spring Boot is a technique that delays the creation of beans until they are requested. This saves system resources and improves performance. 
   How it works: When the Spring container starts up, it doesn't create all beans immediately Instead, it waits until the bean is needed in the application context 
                 This approach is more efficient because it loads only the main entity at first, fetching related entities only when needed 
   Benefits :    Startup time: Lazy loading can significantly improve application startup time 

   Memory consumption:  Lazy loading can improve memory consumption, especially when there are a large number of beans.

   Resource consumption:  Lazy loading can reduce resource consumption, which can lead to lower operational costs. 
   
   How to configure lazy loading : use the @Lazy annotation to configure lazy loading for a class


22. What is lazy loading in JPA?
   By default, JPA uses lazy loading for relationships when you specify . So, when you query a object, it loads the person's data but doesn't immediately load 
   the associated address. Only when you access the attribute of a object, JPA triggers a database query to load the associated address.


23. What is fail-fast and fail-safe in Spring Boot?
    Fail-safe iterators means they will not throw any exception even if the collection is modified while iterating over it. Whereas Fail-fast iterators throw
    an exception( ConcurrentModificationException ) if the collection is modified while iterating over it.


24.  @RestControllerAdvice is a Spring Framework annotation that allows for global exception handling. It defines a class that is called when an exception occurs,
     it handles exceptions across an entire application. it can contain multiple methods, each with the @ExceptionHandler annotation to handle a specific exception. 
    
     The @ExceptionHandler method can return a ResponseEntity object, which represents an HTTP response.

     Benefits : Centralized exception handling makes code more maintainable and readable. It provides a consistent response to users.

example: 

UserNotFoundException.java

public class UserNotFoundException extends RuntimeException {
    public UserNotFoundException(String message) {
        super(message);
    }
}


GlobalExceptionHandler.java

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(UserNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleUserNotFoundException(UserNotFoundException ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("status", HttpStatus.NOT_FOUND.value());
        response.put("error", "Not Found");
        response.put("message", ex.getMessage());

        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGenericException(Exception ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        response.put("error", "Internal Server Error");
        response.put("message", ex.getMessage());

        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
